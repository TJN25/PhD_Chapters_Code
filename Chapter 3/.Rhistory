smoothHigh <- as.data.frame(smoothHigh) %>% mutate(x = row_number() -1) %>% mutate(group = "high") %>% dplyr::rename(y = smoothHigh) %>% mutate(y = y/highTotal)
smoothLow <- as.data.frame(smoothLow) %>% mutate(x = row_number() -1) %>% mutate(group = "low") %>% dplyr::rename(y = smoothLow) %>% mutate(y = y/lowTotal)
pcCounts <- dat %>% filter(group == "Positive Control") %>% group_by(gc.score) %>% summarise(count = n()) %>% arrange(gc.score) %>% ungroup() %>% tidyr::complete(gc.score = seq(from = 0, to = 100, by = 1), fill = list(count = 0))
pcTotal <- dat %>% filter(group == "Positive Control") %>% nrow()
pcGC <- zoo::zoo(pcCounts$count)
smoothPC <- zoo::rollapply(pcGC, width = 10, by = 1, FUN = mean, align = "center", partial = T)
smoothPC <- as.data.frame(smoothPC) %>% mutate(x = row_number() -1) %>% mutate(group = "Positive Control") %>% dplyr::rename(y = smoothPC) %>% mutate(y = y/pcTotal)
smoothGC <- smoothHigh %>%  bind_rows(smoothLow, smoothPC)
gc.p <- ggplot() +
geom_path(data = smoothGC, aes(x = x, y = y, group = group, color = group), size = 1, show.legend = FALSE)  + labs(y = "Proportion", x = "GC percentage")  + theme_classic()
all.p <- ggarrange(distance.p, reads.p, mfe.p, z.p, rscape.p, alifold.cov.p,  motif.p, gc.p + rremove("x.text"),
labels = LETTERS[1:9],
ncol = 3, nrow = 3)
all.p
View(featuresSelected)
load("~/bin/Phd/Chapter_4/chapter_4_files/predDat.Rda")
load("~/bin/Phd/Chapter_4/chapter_4_files/validatation2.Rda")
##function written using max_dist as column name so each variable needs to  be renamed to this before using cumulativeDistribution()
featuresSelected <- predDat %>%
mutate(group = ifelse(probability > 0.75, 'high', ifelse(probability <= 0.17, 'low', 'drop'))) %>%
filter(group != 'drop') %>% select(group, distance, read.max.score,
cov.min.eval, z_max, motif.max.score,
alifold_cov_score, mfe.score,
gc.score) %>%
bind_rows(validation2 %>% filter(group == 'Positive Control') %>%
select(group, distance, read.max.score,
cov.min.eval, z_max, motif.max.score,
alifold_cov_score, mfe.score,
gc.score))
dat <- featuresSelected %>% dplyr::rename(max_dist = distance)
distance.p <- cumulativeDistribution(dat, alternative = "two.sided", show.legend = F)
distance.p <- distance.p +
labs(y = "Cumulative Proportion", x = "Evolutionary distance")
##known sRNAs and predicted RUFs are only selected if there is read depths. For a fair comparison, RINCs with read depths of 0 are removed.
dat <- featuresSelected %>% select(group, read.max.score) %>% dplyr::rename(max_dist = read.max.score) %>% filter(max_dist > 0)
reads.p <- cumulativeDistribution(dat, alternative = 'two.sided', show.legend = F)
reads.p <- reads.p +
labs(y = "Cumulative Proportion", x = "Total reads")+
scale_x_continuous(trans = "log10")
#reads.p
dat <- featuresSelected %>% mutate(max_dist = -log(cov.min.eval))
rscape.p <- cumulativeDistribution(dat)
rscape.p <- rscape.p +
labs(y = "Cumulative Proportion", x = "Rscape covariance score")
# rscape.p
##none of the z scores are greater than 3, so the NA value of 10 is changed to 3 (then the negaive is taken for the plot)
dat <- featuresSelected %>% mutate(max_dist = ifelse(z_max == 10, -3, -z_max)) %>% select(group, max_dist)
z.p <- cumulativeDistribution(dat, show.legend = F)
z.p <- z.p +
labs(y = "Cumulative Proportion", x = "Alifold z-score (negative energy)")
# z.p
##selected a window where the values are easier to visualise. This has removed 16 known sRNAs and 9 predicted RUFs
dat <- featuresSelected %>% dplyr::rename(max_dist = motif.max.score) %>% filter(max_dist < 1000)
motif.p <- cumulativeDistribution(dat)
motif.p <- motif.p +
labs(y = "Cumulative Proportion", x = "Motif score")
dat <- featuresSelected %>% mutate(max_dist = -alifold_cov_score)
alifold.cov.p <- cumulativeDistribution(dat)
alifold.cov.p <- alifold.cov.p +
labs(y = "Cumulative Proportion", x = "Alifold covariance score")
dat <- featuresSelected %>% mutate(max_dist = -mfe.score)
mfe.p <- cumulativeDistribution(dat, alternative = 'two.sided')
mfe.p <- mfe.p +
labs(y = "Cumulative Proportion", x = "MFE score (negative energy)")
dat <- featuresSelected %>% arrange(gc.score) %>% mutate(gc.score = round(gc.score))
highCounts <- dat %>% filter(group == "high") %>% group_by(gc.score) %>% summarise(count = n()) %>% arrange(gc.score) %>% ungroup() %>% tidyr::complete(gc.score = seq(from = 0, to = 100, by = 1), fill = list(count = 0))
lowCounts <- dat %>% filter(group == "low") %>% group_by(gc.score) %>% summarise(count = n()) %>% arrange(gc.score) %>% ungroup() %>% tidyr::complete(gc.score = seq(from = 0, to = 100, by = 1), fill = list(count = 0))
highTotal <- dat %>% filter(group == "high") %>% nrow()
lowTotal <- dat %>% filter(group == "low") %>% nrow()
highGC <- zoo::zoo(highCounts$count)
lowGC <- zoo::zoo(lowCounts$count)
smoothHigh <- zoo::rollapply(highGC, width = 10, by = 1, FUN = mean, align = "center", partial = T)
smoothLow <- zoo::rollapply(lowGC, width = 10, by = 1, FUN = mean, align = "center", partial = T)
smoothHigh <- as.data.frame(smoothHigh) %>% mutate(x = row_number() -1) %>% mutate(group = "high") %>% dplyr::rename(y = smoothHigh) %>% mutate(y = y/highTotal)
smoothLow <- as.data.frame(smoothLow) %>% mutate(x = row_number() -1) %>% mutate(group = "low") %>% dplyr::rename(y = smoothLow) %>% mutate(y = y/lowTotal)
pcCounts <- dat %>% filter(group == "Positive Control") %>% group_by(gc.score) %>% summarise(count = n()) %>% arrange(gc.score) %>% ungroup() %>% tidyr::complete(gc.score = seq(from = 0, to = 100, by = 1), fill = list(count = 0))
pcTotal <- dat %>% filter(group == "Positive Control") %>% nrow()
pcGC <- zoo::zoo(pcCounts$count)
smoothPC <- zoo::rollapply(pcGC, width = 10, by = 1, FUN = mean, align = "center", partial = T)
smoothPC <- as.data.frame(smoothPC) %>% mutate(x = row_number() -1) %>% mutate(group = "Positive Control") %>% dplyr::rename(y = smoothPC) %>% mutate(y = y/pcTotal)
smoothGC <- smoothHigh %>%  bind_rows(smoothLow, smoothPC)
gc.p <- ggplot() +
geom_path(data = smoothGC, aes(x = x, y = y, group = group, color = group), size = 1, show.legend = FALSE)  + labs(y = "Proportion", x = "GC percentage")  + theme_classic()
all.p <- ggarrange(distance.p, reads.p, mfe.p, z.p, rscape.p, alifold.cov.p,  motif.p, gc.p + rremove("x.text"),
labels = LETTERS[1:9],
ncol = 3, nrow = 3)
all.p
View(validation2)
load("~/bin/Phd/Chapter_4/chapter_4_files/predDat.Rda")
load("~/bin/Phd/Chapter_4/chapter_4_files/validatation2.Rda")
##function written using max_dist as column name so each variable needs to  be renamed to this before using cumulativeDistribution()
featuresSelected <- predDat %>%
mutate(group = ifelse(probability > 0.75, 'high', ifelse(probability <= 0.17, 'low', 'drop'))) %>%
filter(group != 'drop') %>% select(group, distance, read.max.score,
cov.min.eval, z_max, motif.max.score,
alifold_cov_score, mfe.score,
gc.score) %>%
bind_rows(validation2 %>% filter(group == 'Positive Control') %>%
select(group, distance, read.max.score,
cov.min.eval, z_max, motif.max.score,
alifold_cov_score, mfe.score,
gc.score))
dat <- featuresSelected %>% dplyr::rename(max_dist = distance) %>% filter(max_dist <= 0.15)
distance.p <- cumulativeDistribution(dat, alternative = "two.sided", show.legend = F)
distance.p <- distance.p +
labs(y = "Cumulative Proportion", x = "Evolutionary distance")
##known sRNAs and predicted RUFs are only selected if there is read depths. For a fair comparison, RINCs with read depths of 0 are removed.
dat <- featuresSelected %>% select(group, read.max.score) %>% dplyr::rename(max_dist = read.max.score) %>% filter(max_dist > 0)
reads.p <- cumulativeDistribution(dat, alternative = 'two.sided', show.legend = F)
reads.p <- reads.p +
labs(y = "Cumulative Proportion", x = "Total reads")+
scale_x_continuous(trans = "log10")
#reads.p
dat <- featuresSelected %>% mutate(max_dist = -log(cov.min.eval))
rscape.p <- cumulativeDistribution(dat)
rscape.p <- rscape.p +
labs(y = "Cumulative Proportion", x = "Rscape covariance score")
# rscape.p
##none of the z scores are greater than 3, so the NA value of 10 is changed to 3 (then the negaive is taken for the plot)
dat <- featuresSelected %>% mutate(max_dist = ifelse(z_max == 10, -3, -z_max)) %>% select(group, max_dist)
z.p <- cumulativeDistribution(dat, show.legend = F)
z.p <- z.p +
labs(y = "Cumulative Proportion", x = "Alifold z-score (negative energy)")
# z.p
##selected a window where the values are easier to visualise. This has removed 16 known sRNAs and 9 predicted RUFs
dat <- featuresSelected %>% dplyr::rename(max_dist = motif.max.score) %>% filter(max_dist < 1000)
motif.p <- cumulativeDistribution(dat)
motif.p <- motif.p +
labs(y = "Cumulative Proportion", x = "Motif score")
dat <- featuresSelected %>% mutate(max_dist = -alifold_cov_score)
alifold.cov.p <- cumulativeDistribution(dat)
alifold.cov.p <- alifold.cov.p +
labs(y = "Cumulative Proportion", x = "Alifold covariance score")
dat <- featuresSelected %>% mutate(max_dist = -mfe.score)
mfe.p <- cumulativeDistribution(dat, alternative = 'two.sided')
mfe.p <- mfe.p +
labs(y = "Cumulative Proportion", x = "MFE score (negative energy)")
dat <- featuresSelected %>% arrange(gc.score) %>% mutate(gc.score = round(gc.score))
highCounts <- dat %>% filter(group == "high") %>% group_by(gc.score) %>% summarise(count = n()) %>% arrange(gc.score) %>% ungroup() %>% tidyr::complete(gc.score = seq(from = 0, to = 100, by = 1), fill = list(count = 0))
lowCounts <- dat %>% filter(group == "low") %>% group_by(gc.score) %>% summarise(count = n()) %>% arrange(gc.score) %>% ungroup() %>% tidyr::complete(gc.score = seq(from = 0, to = 100, by = 1), fill = list(count = 0))
highTotal <- dat %>% filter(group == "high") %>% nrow()
lowTotal <- dat %>% filter(group == "low") %>% nrow()
highGC <- zoo::zoo(highCounts$count)
lowGC <- zoo::zoo(lowCounts$count)
smoothHigh <- zoo::rollapply(highGC, width = 10, by = 1, FUN = mean, align = "center", partial = T)
smoothLow <- zoo::rollapply(lowGC, width = 10, by = 1, FUN = mean, align = "center", partial = T)
smoothHigh <- as.data.frame(smoothHigh) %>% mutate(x = row_number() -1) %>% mutate(group = "high") %>% dplyr::rename(y = smoothHigh) %>% mutate(y = y/highTotal)
smoothLow <- as.data.frame(smoothLow) %>% mutate(x = row_number() -1) %>% mutate(group = "low") %>% dplyr::rename(y = smoothLow) %>% mutate(y = y/lowTotal)
pcCounts <- dat %>% filter(group == "Positive Control") %>% group_by(gc.score) %>% summarise(count = n()) %>% arrange(gc.score) %>% ungroup() %>% tidyr::complete(gc.score = seq(from = 0, to = 100, by = 1), fill = list(count = 0))
pcTotal <- dat %>% filter(group == "Positive Control") %>% nrow()
pcGC <- zoo::zoo(pcCounts$count)
smoothPC <- zoo::rollapply(pcGC, width = 10, by = 1, FUN = mean, align = "center", partial = T)
smoothPC <- as.data.frame(smoothPC) %>% mutate(x = row_number() -1) %>% mutate(group = "Positive Control") %>% dplyr::rename(y = smoothPC) %>% mutate(y = y/pcTotal)
smoothGC <- smoothHigh %>%  bind_rows(smoothLow, smoothPC)
gc.p <- ggplot() +
geom_path(data = smoothGC, aes(x = x, y = y, group = group, color = group), size = 1, show.legend = FALSE)  + labs(y = "Proportion", x = "GC percentage")  + theme_classic()
all.p <- ggarrange(distance.p, reads.p, mfe.p, z.p, rscape.p, alifold.cov.p,  motif.p, gc.p + rremove("x.text"),
labels = LETTERS[1:9],
ncol = 3, nrow = 3)
all.p
source("~/bin/manuscript/manuscript.Rmd")
source("~/bin/manuscript/manuscript.Rmd")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggtree)
library(treeio)
library(ape)
library(UpSetR)
library(svglite)
library(ROSE)
library(ggpubr)
source('~/bin/R/functions.R')
data_path = '~/bin/R/r_files/'
figure_path = '~/Google Drive/My Drive/Comparative_RNA-Seq/'
load("~/bin/PhD/Chapter_4/chapter_4_files/predDat.Rda")
load("~/bin/PhD/Chapter_4/chapter_4_files/validatation2.Rda")
#not sure if setting factors will break anything so using another data frame
plotDat <- probDat
plotDat$group <- factor(plotDat$group,
levels = c('Positive Control',
'Predicted',
'Negative Control'))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggtree)
library(treeio)
library(ape)
library(UpSetR)
library(svglite)
library(ROSE)
library(ggpubr)
source('~/bin/R/functions.R')
data_path = '~/bin/R/r_files/'
figure_path = '~/Google Drive/My Drive/Comparative_RNA-Seq/'
load("~/bin/PhD/Chapter_4/chapter_4_files/predDat.Rda")
load("~/bin/PhD/Chapter_4/chapter_4_files/validatation2.Rda")
#select the desired columns from the predicted data and validatation data
probDat <- predDat %>%
select(probability, ID, group, srna.counts.2) %>%
bind_rows(validation2 %>% select(probability, ID, group, srna.counts.2))
#not sure if setting factors will break anything so using another data frame
plotDat <- probDat
plotDat$group <- factor(plotDat$group,
levels = c('Positive Control',
'Predicted',
'Negative Control'))
#plot histogram of the probabilities
p <- ggplot() +
geom_histogram(data = plotDat,
aes(x = probability,
y = ..density..,
group = group,
fill = group),
binwidth = 0.02) +
geom_vline(xintercept = 0.17) +
geom_vline(xintercept = 0.5)
p
countsCumul <- cumulativeCounts(dists = probDat,
smooth = F,
target_column = 'probability')
##produces plot to use for figure showing probability results
p <- ggplot() +
geom_line(data = countsCumul, aes(x= probability,
y = cumulative_prop,
group = group,
colour = group),
size = 1.5,
show.legend = F) +
scale_y_continuous(trans = 'log10')
p + theme_classic()
load("~/bin/PhD/Chapter_4/chapter_4_files/predDat.Rda")
load("~/bin/PhD/Chapter_4/chapter_4_files/validatation2.Rda")
#select the desired columns from the predicted data and validatation data
probDat <- predDat %>%
select(probability, ID, group, srna.counts.2) %>%
bind_rows(validation2 %>%
select(probability, ID, group, srna.counts.2))
#not sure if setting factors will break anything so using another data frame
plotDat <- probDat
plotDat$group <- factor(plotDat$group,
levels = c('Positive Control',
'Predicted',
'Negative Control'))
dat <- allScores(plotDat, 0.01, 'probability')
ggplot(data = dat) +
geom_line(aes(x = threshold, y = ppv), color = 'blue') +
geom_line(aes(x = threshold, y = fnr), color = 'red')
roc.curve(response = plotDat$group[plotDat$group != 'Predicted'],
predicted = plotDat$probability[plotDat$group != 'Predicted'])
ggplot(data = dat) +
geom_line(aes(x = fnr, y = specificity), color = 'blue') +
geom_line(aes(x = fpr, y = sensitivity), color = 'red')
ference between low scoring (p < 0.17 and high scoring p > 0.5) predicted rufs?
load("~/bin/Phd/Chapter_4/chapter_4_files/predDat.Rda")
load("~/bin/Phd/Chapter_4/chapter_4_files/validatation2.Rda")
##function written using max_dist as column name so each variable needs to  be renamed to this before using cumulativeDistribution()
featuresSelected <- predDat %>%
mutate(group = ifelse(probability > 0.75, 'high', ifelse(probability <= 0.17, 'low', 'drop'))) %>%
filter(group != 'drop') %>% select(group, distance, read.max.score,
cov.min.eval, z_max, motif.max.score,
alifold_cov_score, mfe.score,
gc.score) %>%
bind_rows(validation2 %>% filter(group == 'Positive Control') %>%
select(group, distance, read.max.score,
cov.min.eval, z_max, motif.max.score,
alifold_cov_score, mfe.score,
gc.score))
dat <- featuresSelected %>% dplyr::rename(max_dist = distance) %>% filter(max_dist <= 0.15)
distance.p <- cumulativeDistribution(dat, alternative = "two.sided", show.legend = F)
distance.p <- distance.p +
labs(y = "Cumulative Proportion", x = "Evolutionary distance")
##known sRNAs and predicted RUFs are only selected if there is read depths. For a fair comparison, RINCs with read depths of 0 are removed.
dat <- featuresSelected %>% select(group, read.max.score) %>% dplyr::rename(max_dist = read.max.score) %>% filter(max_dist > 0)
reads.p <- cumulativeDistribution(dat, alternative = 'two.sided', show.legend = F)
reads.p <- reads.p +
labs(y = "Cumulative Proportion", x = "Total reads")+
scale_x_continuous(trans = "log10")
#reads.p
dat <- featuresSelected %>% mutate(max_dist = -log(cov.min.eval))
rscape.p <- cumulativeDistribution(dat)
rscape.p <- rscape.p +
labs(y = "Cumulative Proportion", x = "Rscape covariance score")
# rscape.p
##none of the z scores are greater than 3, so the NA value of 10 is changed to 3 (then the negaive is taken for the plot)
dat <- featuresSelected %>% mutate(max_dist = ifelse(z_max == 10, -3, -z_max)) %>% select(group, max_dist)
z.p <- cumulativeDistribution(dat, show.legend = F)
z.p <- z.p +
labs(y = "Cumulative Proportion", x = "Alifold z-score (negative energy)")
# z.p
##selected a window where the values are easier to visualise. This has removed 16 known sRNAs and 9 predicted RUFs
dat <- featuresSelected %>% dplyr::rename(max_dist = motif.max.score) %>% filter(max_dist < 1000)
motif.p <- cumulativeDistribution(dat)
motif.p <- motif.p +
labs(y = "Cumulative Proportion", x = "Motif score")
dat <- featuresSelected %>% mutate(max_dist = -alifold_cov_score)
alifold.cov.p <- cumulativeDistribution(dat)
alifold.cov.p <- alifold.cov.p +
labs(y = "Cumulative Proportion", x = "Alifold covariance score")
dat <- featuresSelected %>% mutate(max_dist = -mfe.score)
mfe.p <- cumulativeDistribution(dat, alternative = 'two.sided')
mfe.p <- mfe.p +
labs(y = "Cumulative Proportion", x = "MFE score (negative energy)")
dat <- featuresSelected %>% arrange(gc.score) %>% mutate(gc.score = round(gc.score))
highCounts <- dat %>% filter(group == "high") %>% group_by(gc.score) %>% summarise(count = n()) %>% arrange(gc.score) %>% ungroup() %>% tidyr::complete(gc.score = seq(from = 0, to = 100, by = 1), fill = list(count = 0))
lowCounts <- dat %>% filter(group == "low") %>% group_by(gc.score) %>% summarise(count = n()) %>% arrange(gc.score) %>% ungroup() %>% tidyr::complete(gc.score = seq(from = 0, to = 100, by = 1), fill = list(count = 0))
highTotal <- dat %>% filter(group == "high") %>% nrow()
lowTotal <- dat %>% filter(group == "low") %>% nrow()
highGC <- zoo::zoo(highCounts$count)
lowGC <- zoo::zoo(lowCounts$count)
smoothHigh <- zoo::rollapply(highGC, width = 10, by = 1, FUN = mean, align = "center", partial = T)
smoothLow <- zoo::rollapply(lowGC, width = 10, by = 1, FUN = mean, align = "center", partial = T)
smoothHigh <- as.data.frame(smoothHigh) %>% mutate(x = row_number() -1) %>% mutate(group = "high") %>% dplyr::rename(y = smoothHigh) %>% mutate(y = y/highTotal)
smoothLow <- as.data.frame(smoothLow) %>% mutate(x = row_number() -1) %>% mutate(group = "low") %>% dplyr::rename(y = smoothLow) %>% mutate(y = y/lowTotal)
pcCounts <- dat %>% filter(group == "Positive Control") %>% group_by(gc.score) %>% summarise(count = n()) %>% arrange(gc.score) %>% ungroup() %>% tidyr::complete(gc.score = seq(from = 0, to = 100, by = 1), fill = list(count = 0))
pcTotal <- dat %>% filter(group == "Positive Control") %>% nrow()
pcGC <- zoo::zoo(pcCounts$count)
smoothPC <- zoo::rollapply(pcGC, width = 10, by = 1, FUN = mean, align = "center", partial = T)
smoothPC <- as.data.frame(smoothPC) %>% mutate(x = row_number() -1) %>% mutate(group = "Positive Control") %>% dplyr::rename(y = smoothPC) %>% mutate(y = y/pcTotal)
smoothGC <- smoothHigh %>%  bind_rows(smoothLow, smoothPC)
gc.p <- ggplot() +
geom_path(data = smoothGC, aes(x = x, y = y, group = group, color = group), size = 1, show.legend = FALSE)  + labs(y = "Proportion", x = "GC percentage")  + theme_classic()
all.p <- ggarrange(distance.p, reads.p, mfe.p, z.p, rscape.p, alifold.cov.p,  motif.p, gc.p + rremove("x.text"),
labels = LETTERS[1:9],
ncol = 3, nrow = 3)
all.p
devtools::install_github("dokato/todor")
load("~/bin/PhD/Chapter_4/chapter_4_files/predDat.Rda")
load("~/bin/PhD/Chapter_4/chapter_4_files/validatation2.Rda")
probDat <- predDat %>% select(probability, ID, group, srna.counts.2) %>% bind_rows(validation2 %>% select(probability, ID, group, srna.counts.2)) %>% dplyr::rename(max_dist = probability)
countsCumul <- cumulativeCounts(dists = probDat, smooth = F)
##produces plot to use for figure showing probabilty results
p <- ggplot() +
geom_line(data = countsCumul, aes(x= max_dist, y = cumulative_prop,
group = group, colour = group),
size = 1.5, show.legend = F)+
scale_y_continuous(trans = 'log10')
p + theme_classic()
knitr::opts_chunk$set(echo = TRUE)
options(warn = -1)
library(tidyverse)
library(devtools)
library(kableExtra)
library(randomForest)
library(ggpubr)
library(gplots)
library(ROSE)
setwd("~/bin/PhD_Chapters_Code/Chapter 3/")
load("~/bin/PhD/Chapter_4/chapter_4_files/predDat.Rda")
load("~/bin/PhD/Chapter_4/chapter_4_files/validatation2.Rda")
probDat <- predDat %>% select(probability, ID, group, srna.counts.2) %>% bind_rows(validation2 %>% select(probability, ID, group, srna.counts.2)) %>% dplyr::rename(max_dist = probability)
countsCumul <- cumulativeCounts(dists = probDat, smooth = F)
##produces plot to use for figure showing probabilty results
p <- ggplot() +
geom_line(data = countsCumul, aes(x= max_dist, y = cumulative_prop,
group = group, colour = group),
size = 1.5, show.legend = F)+
scale_y_continuous(trans = 'log10')
p + theme_classic()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggtree)
library(treeio)
library(ape)
library(UpSetR)
library(svglite)
library(ROSE)
library(ggpubr)
source('~/bin/R/functions.R')
data_path = '~/bin/R/r_files/'
figure_path = '~/Google Drive/My Drive/Comparative_RNA-Seq/'
load("~/bin/PhD/Chapter_4/chapter_4_files/predDat.Rda")
load("~/bin/PhD/Chapter_4/chapter_4_files/validatation2.Rda")
probDat <- predDat %>% select(probability, ID, group, srna.counts.2) %>% bind_rows(validation2 %>% select(probability, ID, group, srna.counts.2)) %>% dplyr::rename(max_dist = probability)
countsCumul <- cumulativeCounts(dists = probDat, smooth = F)
##produces plot to use for figure showing probabilty results
p <- ggplot() +
geom_line(data = countsCumul, aes(x= max_dist, y = cumulative_prop,
group = group, colour = group),
size = 1.5, show.legend = F)+
scale_y_continuous(trans = 'log10')
p + theme_classic()
load("~/bin/PhD/Chapter_4/chapter_4_files/predDat.Rda")
load("~/bin/PhD/Chapter_4/chapter_4_files/validatation2.Rda")
probDat <- predDat %>% select(probability, ID, group, srna.counts.2) %>% bind_rows(validation2 %>% select(probability, ID, group, srna.counts.2)) %>% dplyr::rename(max_dist = probability)
countsCumul <- cumulativeCounts(dists = probDat, smooth = F)
View(countsCumul)
load("~/bin/PhD/Chapter_4/chapter_4_files/predDat.Rda")
load("~/bin/PhD/Chapter_4/chapter_4_files/validatation2.Rda")
probDat <- predDat %>% select(probability, ID, group, srna.counts.2) %>% bind_rows(validation2 %>% select(probability, ID, group, srna.counts.2)) %>% dplyr::rename(max_dist = probability)
View(probDat)
dists = probDat
smooth = F)
smooth = F
target_column = 'max_dist'
groups <- unique(dists$group)
for(i in groups){
dat <- dists %>% filter(group == i)
dat <- dat %>% mutate(count = 1) %>%
arrange(-.data[[target_column]]) %>% group_by(group) %>%
mutate(cumulativeCount = cumsum(count)) %>% ungroup() %>%
group_by(group, .data[[target_column]]) %>% summarise(cumulative_prop = max(cumulativeCount)/ nrow(dat))
if(smooth){
dat <- as.data.frame(spline(x = dat[[target_column]],y =  dat$cumulative_prop))
}
dat <- dat %>% ungroup() %>% mutate(group = i)
if(exists('combinedDat')){
combinedDat <- combinedDat %>% bind_rows(dat)
}else{
combinedDat <- dat
}
}
View(combinedDat)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggtree)
library(treeio)
library(ape)
library(UpSetR)
library(svglite)
library(ROSE)
library(ggpubr)
source('~/bin/R/functions.R')
data_path = '~/bin/R/r_files/'
figure_path = '~/Google Drive/My Drive/Comparative_RNA-Seq/'
load("~/bin/PhD/Chapter_4/chapter_4_files/predDat.Rda")
load("~/bin/PhD/Chapter_4/chapter_4_files/validatation2.Rda")
#select the desired columns from the predicted data and validatation data
probDat <- predDat %>%
select(probability, ID, group, srna.counts.2) %>%
bind_rows(validation2 %>% select(probability, ID, group, srna.counts.2))
#not sure if setting factors will break anything so using another data frame
plotDat <- probDat
plotDat$group <- factor(plotDat$group,
levels = c('Positive Control',
'Predicted',
'Negative Control'))
#plot histogram of the probabilities
p <- ggplot() +
geom_histogram(data = plotDat,
aes(x = probability,
y = ..density..,
group = group,
fill = group),
binwidth = 0.02) +
geom_vline(xintercept = 0.17) +
geom_vline(xintercept = 0.5)
p
countsCumul <- cumulativeCounts(dists = probDat,
smooth = F,
target_column = 'probability')
##produces plot to use for figure showing probability results
p <- ggplot() +
geom_line(data = countsCumul, aes(x= probability,
y = cumulative_prop,
group = group,
colour = group),
size = 1.5,
show.legend = F) +
scale_y_continuous(trans = 'log10')
p + theme_classic()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggtree)
library(treeio)
library(ape)
library(UpSetR)
library(svglite)
library(ROSE)
library(ggpubr)
options(dplyr.summarise.inform = FALSE)
source('~/bin/R/functions.R')
data_path = '~/bin/R/r_files/'
figure_path = '~/Google Drive/My Drive/Comparative_RNA-Seq/'
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggtree)
library(treeio)
library(ape)
library(UpSetR)
library(svglite)
library(ROSE)
library(ggpubr)
options(dplyr.summarise.inform = FALSE)
source('~/bin/R/functions.R')
data_path = '~/bin/R/r_files/'
figure_path = '~/Google Drive/My Drive/Comparative_RNA-Seq/'
load("~/bin/PhD/Chapter_4/chapter_4_files/predDat.Rda")
load("~/bin/PhD/Chapter_4/chapter_4_files/validatation2.Rda")
#select the desired columns from the predicted data and validatation data
probDat <- predDat %>%
select(probability, ID, group, srna.counts.2) %>%
bind_rows(validation2 %>% select(probability, ID, group, srna.counts.2))
#not sure if setting factors will break anything so using another data frame
plotDat <- probDat
plotDat$group <- factor(plotDat$group,
levels = c('Positive Control',
'Predicted',
'Negative Control'))
#plot histogram of the probabilities
p <- ggplot() +
geom_histogram(data = plotDat,
aes(x = probability,
y = ..density..,
group = group,
fill = group),
binwidth = 0.02) +
geom_vline(xintercept = 0.17) +
geom_vline(xintercept = 0.5)
p
countsCumul <- cumulativeCounts(dists = probDat,
smooth = F,
target_column = 'probability')
