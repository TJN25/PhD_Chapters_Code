"Station1" = runif(length(seq.Date(as.Date("1970-1-1"), as.Date("2000-12-31"), "days")), 10, 30),
"Station2" = runif(length(seq.Date(as.Date("1970-1-1"), as.Date("2000-12-31"), "days")), 11, 29),
"Station3" = runif(length(seq.Date(as.Date("1970-1-1"), as.Date("2000-12-31"), "days")), 8, 28))
#Calculation of normal minimum temperature
df_summarise_all <- df %>%
as_tibble() %>% # for easier viewing
mutate(day = format(as.Date(df$Date, format='%Y-%m-%d'), format='%m-%d')) %>%
group_by(day) %>%
summarise_all(list(mean)) %>%
pivot_longer(cols = -c(Date, day), names_to = "variable", values_to = "value")
#Identification of days fulfilling the condition for cold wave
#Identification of days fulfilling the condition for cold wave
df_tmp <- df %>%
)
df %>%
as_tibble() %>% # for easier viewing
mutate(day = format(as.Date(df$Date, format='%Y-%m-%d'), format='%m-%d'))
df %>%
as_tibble() %>% # for easier viewing
mutate(day = format(as.Date(df$Date, format='%Y-%m-%d'), format='%m-%d')) %>%
tidyr::pivot_longer(cols = -c(Date, day),
names_to = "Stations", values_to = "MinT")
#Identification of days fulfilling the condition for cold wave
df_tmp <- df %>%
)
df_tmp <- df %>%
as_tibble() %>% # for easier viewing
mutate(day = format(as.Date(df$Date, format='%Y-%m-%d'), format='%m-%d')) %>%
tidyr::pivot_longer(cols = -c(Date, day),
names_to = "Stations", values_to = "MinT") %>%
left_join(df_summarise_all %>% rename(mean_MinT = value)
df_tmp <- df %>%
as_tibble() %>% # for easier viewing
mutate(day = format(as.Date(df$Date, format='%Y-%m-%d'), format='%m-%d')) %>%
tidyr::pivot_longer(cols = -c(Date, day),
names_to = "Stations", values_to = "MinT") %>%
left_join(df_summarise_all %>% rename(mean_MinT = value)) %>%
mutate(is_coldwave = zoo::rollapplyr(MinT < (ifelse(mean_MinT < 10, mean_MinT - 4, mean_MinT - 5)),
1, all, fill = NA))
df_tmp <- df %>%
as_tibble() %>% # for easier viewing
mutate(day = format(as.Date(df$Date, format='%Y-%m-%d'), format='%m-%d')) %>%
tidyr::pivot_longer(cols = -c(Date, day),
names_to = "Stations", values_to = "MinT") %>%
left_join(df_summarise_all %>% rename(mean_MinT = value)) %>%
mutate(is_coldwave = zoo::rollapplyr(MinT < (ifelse(mean_MinT < 10, mean_MinT - 4, mean_MinT - 5)),
1, all, fill = NA))
View(df_tmp)
set.seed(123)
df <- data.frame("Date"= seq(from = as.Date("1970-1-1"), to = as.Date("2000-12-31"), by = "day"),
"Station1" = runif(length(seq.Date(as.Date("1970-1-1"), as.Date("2000-12-31"), "days")), 10, 30),
"Station2" = runif(length(seq.Date(as.Date("1970-1-1"), as.Date("2000-12-31"), "days")), 11, 29),
"Station3" = runif(length(seq.Date(as.Date("1970-1-1"), as.Date("2000-12-31"), "days")), 8, 28))
#Calculation of normal minimum temperature
df_summarise_all <- df %>%
as_tibble() %>% # for easier viewing
mutate(day = format(as.Date(df$Date, format='%Y-%m-%d'), format='%m-%d')) %>%
group_by(day) %>%
summarise_all(list(mean)) %>%
pivot_longer(cols = -c(Date, day), names_to = "variable", values_to = "value")
#Identification of days fulfilling the condition for cold wave
df_out <- df %>%
as_tibble() %>% # for easier viewing
mutate(day = format(as.Date(df$Date, format='%Y-%m-%d'), format='%m-%d')) %>%
tidyr::pivot_longer(cols = -c(Date, day),
names_to = "Stations", values_to = "MinT") %>%
left_join(df_summarise_all %>% rename(mean_MinT = value),
by = c('day' = 'day', 'Stations' = 'variable')) %>%
mutate(is_coldwave = zoo::rollapplyr(MinT < (ifelse(mean_MinT < 10, mean_MinT - 4, mean_MinT - 5)),
1, all, fill = NA))
df_out <- df %>%
as_tibble() %>% # for easier viewing
mutate(day = format(as.Date(df$Date, format='%Y-%m-%d'), format='%m-%d')) %>%
tidyr::pivot_longer(cols = -c(Date, day),
names_to = "Stations", values_to = "MinT") %>%
left_join(df_summarise_all %>% rename(mean_MinT = value),
by = c('day' = 'day', 'Stations' = 'variable')) %>%
mutate(is_coldwave = zoo::rollapplyr(MinT < (ifelse(mean_MinT < 10, mean_MinT - 4, mean_MinT - 5)),
1, all, fill = NA))%>%
mutate(is_severe_coldwave = zoo::rollapplyr(MinT < (ifelse(mean_MinT < 10, mean_MinT - 5, mean_MinT - 6)),
1, all, fill = NA))
View(df_out)
#Identification of days fulfilling the condition for cold wave
df_out <- df %>%
as_tibble() %>% # for easier viewing
mutate(day = format(as.Date(df$Date, format='%Y-%m-%d'), format='%m-%d')) %>%
tidyr::pivot_longer(cols = -c(Date, day),
names_to = "Stations", values_to = "MinT") %>%
left_join(df_summarise_all %>% rename(mean_MinT = value),
by = c('day' = 'day', 'Stations' = 'variable')) %>%
mutate(is_coldwave = zoo::rollapplyr(round(MinT) < (ifelse(mean_MinT < 10, mean_MinT - 4, mean_MinT - 5)),
1, all, fill = NA))%>%
mutate(is_severe_coldwave = zoo::rollapplyr(round(MinT) < (ifelse(mean_MinT < 10, mean_MinT - 5, mean_MinT - 6)),
1, all, fill = NA)) %>%
mutate(is_coldwave= ifelse(is_severe_coldwave == T, F, is_coldwave))
runApp('~/bin/example_problems_datasets/test_app')
runApp('~/bin/example_problems_datasets/test_app')
runApp('~/bin/example_problems_datasets/test_app')
runApp('~/bin/example_problems_datasets/test_app')
df1 <- structure(
list(date1= c("2021-06-28","2021-06-28","2021-06-28","2021-06-28","2021-06-28","2021-06-28","2021-06-28","2021-06-28"),
date2 = c("2021-06-29","2021-06-29","2021-06-30","2021-06-30","2021-07-01","2021-07-01","2021-07-02","2021-07-03"),
Category = c("FDE","ABC","FDE","ABC","FDE","ABC","ABC","ABC"),
Week= c("Friday","Monday","Wednesday","Wednesday","Friday","Friday","Saturday","Sunday"),
DR1 = c(4,1,6,3,1,3,0,0),
DR01 = c(4,1,4,3,1,3,0,0), DR02= c(4,2,6,2,2,4,0,0),DR03= c(9,5,4,7,5,2,0,0),
DR04 = c(5,4,3,2,3,4,0,0),DR05 = c(5,4,5,4,2,4,0,0),
DR06 = c(2,4,3,2,2,4,0,0),DR07 = c(2,5,4,4,4,2,0,0),
DR08 = c(3,4,5,4,2,4,0,0),DR09 = c(2,3,4,4,4,2,0,0)),
class = "data.frame", row.names = c(NA, -8L))
x<-df1 %>% select(starts_with("DR0"))
x<-cbind(df1, setNames(df1$DR1 - x, paste0(names(x), "_PV")))
PV<-select(x, date2,Week, Category, DR1, ends_with("PV"))
med<-PV %>%
group_by(Category,Week) %>%
summarize(across(ends_with("PV"), median))
SPV<-df1%>%
inner_join(med, by = c('Category', 'Week')) %>%
mutate(across(matches("^DR0\\d+$"), ~.x +
get(paste0(cur_column(), '_PV')),
.names = '{col}_{col}_PV')) %>%
select(date1:Category, DR01_DR01_PV:last_col())
SPV<-data.frame(SPV)
mat1 <- df1 %>%
filter(date2 == dmda, Category == CategoryChosse) %>%
select(starts_with("DR0")) %>%
pivot_longer(cols = everything()) %>%
arrange(desc(row_number())) %>%
mutate(cs = cumsum(value)) %>%
filter(cs == 0) %>%
pull(name)
dmda <- as.Date("2021-07-02")
CategoryChosse <- "FDE"
mat1 <- df1 %>%
filter(date2 == dmda, Category == CategoryChosse) %>%
select(starts_with("DR0")) %>%
pivot_longer(cols = everything()) %>%
arrange(desc(row_number())) %>%
mutate(cs = cumsum(value)) %>%
filter(cs == 0) %>%
pull(name)
(dropnames <- paste0(mat1,"_",mat1, "_PV"))
SPV <- SPV %>%
filter(date2 == dmda, Category == CategoryChosse) %>%
select(-any_of(dropnames))
datas<-SPV %>%
filter(date2 == ymd(dmda)) %>%
group_by(Category) %>%
summarize(across(starts_with("DR0"), sum)) %>%
pivot_longer(cols= -Category, names_pattern = "DR0(.+)", values_to = "val") %>%
mutate(name = readr::parse_number(name))
colnames(datas)[-1]<-c("Days","Numbers")
datas
SPV
colnames(datas)[-1]<-c("Days","Numbers")
if(as.Date(dmda) < min(as.Date(df1$date1))){
datas <- datas %>%
group_by(Category) %>%
slice(1:max(Days)+1) %>%
ungroup
}else{
datas <- datas %>%
group_by(Category) %>%
slice((as.Date(dmda) - min(as.Date(df1$date1) [
df1$Category == first(Category)])):max(Days)+1) %>%
ungroup
}
datas <- datas %>%
group_by(Category) %>%
slice((as.Date(dmda) - min(as.Date(df1$date1) [
df1$Category == first(Category)])):max(Days)+1) %>%
ungroup
plot(Numbers ~ Days,  xlim= c(0,45), ylim= c(0,30),
xaxs='i',data = datas,main = paste0(dmda, "-", CategoryChosse))
runApp('~/bin/example_problems_datasets/test_app')
plot(Numbers ~ Days,  xlim= c(0,45), ylim= c(0,30),
xaxs='i',data = datas,main = paste0(dmda, "-", CategoryChosse))
model <- nls(Numbers ~ b1*Days^2+b2,start = list(b1 = 0,b2 = 0),data = datas, algorithm = "port")
runApp('~/bin/example_problems_datasets/test_app')
runApp('~/bin/example_problems_datasets/test_app')
runApp('~/bin/example_problems_datasets/test_app')
runApp('~/bin/example_problems_datasets/test_app')
runApp('~/bin/example_problems_datasets/test_app')
runApp('~/bin/example_problems_datasets/test_app')
runApp('~/bin/example_problems_datasets/test_app')
runApp('~/bin/example_problems_datasets/test_app')
dat <- data.frame(x = "t", "a", "g",
y = "c", "t", "g",
z = "a", "a", "t")
dat
dat <- data.frame(x = c("t", "a", "g"),
y = c("c", "t", "g"),
z = c("a", "a", "t"))
dat
dat$y[dat$y == dat$x] <- 1
dat
dat$y[dat$y != dat$x] <- 0
dat$y[dat$y == dat$x] <- 1
dat$y[dat$y != dat$x] <- 0
dat$z[dat$z == dat$x] <- 1
dat$z[dat$z != dat$x] <- 0
dat
dat <- data.frame(x = c("t", "a", "g"),
y = c("c", "t", "g"),
z = c("a", "a", "t"))
dat
dat$y[dat$y != dat$x] <- 0
dat$y[dat$y == dat$x] <- 1
dat$z[dat$z != dat$x] <- 0
dat$z[dat$z == dat$x] <- 1
dat
df <- data.frame(x = c("t", "a", "g"),
y = c("c", "t", "g"),
z = c("a", "a", "t"))
df[-1] <- +(df[[1]] == df[-1])
df
df[[1]] == df[-1]
df <- data.frame(x = c("t", "a", "g"),
y = c("c", "t", "g"),
z = c("a", "a", "t"))
df[[1]] == df[-1]
df[[1]]
df[-1]
df[[1]] == df[-1]
+(df[[1]] == df[-1])
aa <- "Bacteria_Firmicutes_Clostridia_Clostridiales_Rumino_coccaceae_Ruminococcus_Ruminococcus_albus"
match("_", strsplit(aa, split = ""))
match(x = "_", table = strsplit(aa, split = ""))
strsplit(aa, split = "")
match(x = "_", table = strsplit(aa, split = "")[[1]])
aa <- paste(substr(x = aa, start = 1, stop = pos -1), substr(x = aa, start = pos + 1, stop = nchar(aa)))
pos <- match(x = "_", table = strsplit(aa, split = "")[[1]])
aa <- paste(substr(x = aa, start = 1, stop = pos -1), substr(x = aa, start = pos + 1, stop = nchar(aa)))
aa
aa <- "Bacteria_Firmicutes_Clostridia_Clostridiales_Rumino_coccaceae_Ruminococcus_Ruminococcus_albus"
pos <- match(x = "_", table = strsplit(aa, split = "")[[1]])
substr(x = aa, start = 1, stop = pos -1)
unlist(str_split(string = aa, pattern = "_"))
unlist(str_split(string = aa, pattern = "_"))[c(1:(pos - 1), (pos+1):)]
str_separated[c(1:(pos - 1), (pos+1):length(str_separated))]
str_separated <- unlist(str_split(string = aa, pattern = "_"))
aa <- paste(str_separated[c(1:(pos - 1), (pos+1):length(str_separated))], collapse = "_")
aa
aa <- "Bacteria_Firmicutes_Clostridia_Clostridiales_Rumino_coccaceae_Ruminococcus_Ruminococcus_albus"
pos <- match(x = "_", table = strsplit(aa, split = "")[[1]])
str_separated <- unlist(str_split(string = aa, pattern = "_"))
str_separated[c(1:(pos - 1), (pos+1):length(str_separated))]
aa <- paste(str_1, str_2, sep = "")
aa <- "Bacteria_Firmicutes_Clostridia_Clostridiales_Rumino_coccaceae_Ruminococcus_Ruminococcus_albus"
pos <- match(x = "_", table = strsplit(aa, split = "")[[1]])
str_separated <- unlist(str_split(string = aa, pattern = "_"))
str_1 <- paste(str_separated[c(1:(pos - 1)], collapse = "_"))
str_2 <- paste(str_separated[c((pos+1):length(str_separated))], collapse = "_")
aa <- paste(str_1, str_2, sep = "")
aa <- "Bacteria_Firmicutes_Clostridia_Clostridiales_Rumino_coccaceae_Ruminococcus_Ruminococcus_albus"
pos <- match(x = "_", table = strsplit(aa, split = "")[[1]])
str_separated <- unlist(str_split(string = aa, pattern = "_"))
str_1 <- paste(str_separated[c(1:(pos - 1)]), collapse = "_")
str_2 <- paste(str_separated[c((pos+1):length(str_separated))], collapse = "_")
aa <- paste(str_1, str_2, sep = "")
str_1 <- paste(str_separated[c(1:(pos - 1)]), collapse = "_")
str_1 <- paste(str_separated[c(1:(pos - 1)) %>% ], collapse = "_")
str_1 <- paste(str_separated[c(1:(pos - 1))], collapse = "_")
str_2 <- paste(str_separated[c((pos+1):length(str_separated))], collapse = "_")
aa <- paste(str_1, str_2, sep = "")
aa
str_1
aa <- "Bacteria_Firmicutes_Clostridia_Clostridiales_Rumino_coccaceae_Ruminococcus_Ruminococcus_albus"
pos <- match(x = "_", table = strsplit(aa, split = "")[[1]])
str_separated <- unlist(str_split(string = aa, pattern = "_"))
str_1 <- paste(str_separated[c(1:(pos - 1))], collapse = "_")
str_2 <- paste(str_separated[c((pos+1):length(str_separated))], collapse = "_")
bb <- paste(str_1, str_2, sep = "")
bb
str1
str_1
str_2
pos <- match(x = "_", table = strsplit(aa, split = "")[[1]])
pos
runApp('~/bin/example_problems_datasets/test_app')
runApp('~/bin/example_problems_datasets/test_app')
runApp('~/bin/example_problems_datasets/test_app')
runApp('~/bin/example_problems_datasets/test_app')
?textOutput()
runApp('~/bin/example_problems_datasets/test_app')
runApp('~/bin/example_problems_datasets/test_app')
runApp('~/bin/example_problems_datasets/test_app')
runApp('~/bin/example_problems_datasets/test_app')
runApp('~/bin/example_problems_datasets/test_app')
runApp('~/bin/example_problems_datasets/test_app')
load("~/bin/r_git/R/r_files/randomForestDistribution_gz.Rda")
load("~/bin/R/r_files/randomForestDistribution_gz.Rda")
load("~/bin/R/r_files/randomForestDistribution_gz.Rda")
p <- ggplot() +
geom_path(data = randomForestDistribution, aes(x = x, y = y, group = group, color = group))  +
scale_y_continuous(trans = 'log10')
p
View(randomForestDistribution)
cumulativeDistribution <- function(dat, run.ks.test = T, alternative_pred, alternative_pc, alternative = 'two.sided', show.legend = F){
if(missing('alternative_pred')){alternative_pred <- alternative}
if(missing('alternative_pc')){alternative_pc <- alternative}
distsCumulativeCount <- cumulativeCounts(dists = dat, smooth = F)
distsCumulativeCount <- distsCumulativeCount %>% filter(group != "Predicted Known")
# dists_cum_count <- distsCumulativeCount
# save(dists_cum_count, file = "~/bin/R/r_files/dists_cum_count.Rda")
p <- ggplot() +
geom_line(data = distsCumulativeCount, aes(x= max_dist, y = cumulative_prop, group = group, colour = group), size = 2, show.legend = show.legend) + theme_classic()
pos <- dat %>% filter(group == "Positive Control")
neg <- dat %>% filter(group == "Negative Control")
pred <- dat %>% filter(group == "Predicted")
if(run.ks.test == T){
res <- ks.test(x = pred$max_dist, y = neg$max_dist, alternative = alternative_pred)
print(res)
res <- ks.test(x = pos$max_dist, y = neg$max_dist, alternative = alternative_pc)
print(res)
}
return(p)
}
cumulativeCounts <- function(dists, smooth = T){
groups <- unique(dists$group)
for(i in groups){
dat <- dists %>% filter(group == i)
dat <- dat %>% mutate(count = 1) %>%
arrange(-max_dist) %>% group_by(group) %>%
mutate(cumulativeCount = cumsum(count)) %>% ungroup() %>%
group_by(group, max_dist) %>% summarise(cumulative_prop = max(cumulativeCount)/ nrow(dat))
if(smooth){
dat <- as.data.frame(spline(x = dat$max_dist,y =  dat$cumulative_prop))
}
dat <- dat %>% ungroup() %>% mutate(group = i)
if(exists('combinedDat')){
combinedDat <- combinedDat %>% bind_rows(dat)
}else{
combinedDat <- dat
}
}
return(combinedDat)
}
load("~/bin/R/r_files/randomForestClassified.Rda")
View(randomForestClassified)
load("~/bin/R/r_files/featuresSelected_gz.Rda")
View(featuresSelected)
load("~/bin/R/r_files/validatation2_gz.Rda")
load("~/bin/R/r_files/randomForestClassified.Rda")
tmp <- randomForestDatAll %>% select(ID, read.counts)
tmp <- randomForestClassified %>% select(ID, read.counts)
load("~/bin/R/r_files/randomForestDatAll_v2.Rda")
tmp <- randomForestDatAll %>% select(ID, read.counts)
View(randomForestDatAll)
load("~/bin/R/r_files/randomForestDatAll.Rda")
load("~/bin/R/r_files/rf_classifier.Rda")
replaceNAs <- function(dat){
dat$mfe.score[is.na(dat$mfe.score)] <- 0
dat$gc.score[is.na(dat$gc.score)] <- 50
dat$distance[is.na(dat$distance)] <- 0
# dat$reads.mean.score[is.na(dat$reads.mean.score)] <- 0
dat$read.max.score[is.na(dat$read.max.score)] <- 0
# dat$cov.mean.score[is.na(dat$cov.mean.score)] <- 0
dat$cov.min.eval[is.na(dat$cov.min.eval)] <- 10
# dat$cov.combined.score[is.na(dat$cov.combined.score)] <- 0
# dat$cov.count[is.na(dat$cov.count)] <- 1
dat$motif.mean.score[is.na(dat$motif.mean.score)] <- 0
dat$motif.max.score[is.na(dat$motif.max.score)] <- 0
dat$motif_count[is.na(dat$motif_count)] <- 0
dat$motif.sum[is.na(dat$motif.sum)] <- 0
# dat$z_mean[is.na(dat$z_mean)] <- 10
dat$z_max[is.na(dat$z_max)] <- 10
# dat$alifold.score[is.na(dat$alifold.score)] <- 0
dat$alifold_cov_score[is.na(dat$alifold_cov_score)] <- 0
# dat$alifold_cov_score[dat$alifold_cov_score > 0] <- 0
return(dat)
}
load("~/bin/R/r_files/rf_classifier.Rda")
load("~/bin/R/r_files/randomForestDat.Rda")
load("~/bin/R/r_files/randomForestDatAll.Rda")
load("~/bin/R/r_files/randomForestTestDat_2.Rda")
load("~/bin/R/r_files/validation1_gz.Rda")
load("~/bin/R/r_files/indexes_gz.Rda")
load("~/bin/R/r_files/rf_classifier_gz.Rda")
validation1 <- randomForestTestDat[-indexes,]
validation1 <- replaceNAs(dat = validation1)
validation1 <- validation1 %>% filter(distance < 0.32) %>% select(read.max.score, distance, cov.min.eval, z_max, motif.max.score, alifold_cov_score, mfe.score, gc.score, srna.counts, motif.sum, group, ID)
set.seed(101)
randomNum <- runif(n = nrow(validation1), min = 0, max = 1)
validation1$random <- randomNum
colGroupNum <- match(x = "group", table = colnames(validation1))
colIDNum <- match(x = "ID", table = colnames(validation1))
prediction_for_roc_curve <- predict(rf_classifier,validation1[,-c(colIDNum, colGroupNum)],type="prob")
knitr::opts_chunk$set(echo = TRUE)
options(warn = -1)
# suppressMessages(library(comparativeSRA))
library(tidyverse)
library(VennDiagram)
library(shiny)
library(ggplot2)
library(gplots)
library(viridis)
library(RColorBrewer)
library(stringi)
#library(plyr)
library(devtools)
#library(tidyr)
library(shinyjs)
library(shinyWidgets)
library(DT)
library(lubridate)
library(dplyr)
library(svglite)
library(genoPlotR)
library(drake)
library(ape)
library(Biostrings)
library(ggtree)
# library(treeio)
library(geiger)
library(ROSE)
library(reshape2)
library(igraph)
library("viridis")
library(randomForest)
library(ROCR)
library(corrplot)
library(kableExtra)
library(reticulate)
library(rjson)
library(GenomicRanges)
library(comparativeSRA)
library(ggpubr)
library(UpSetR)
filePath <- "~/phd/RNASeq/r_files/"
# use_python("/Users/thomasnicholson/anaconda3/bin/python")
# use_condaenv("comparativesrna")
source('~/bin/R/render_toc.R')
replaceNAs <- function(dat){
dat$mfe.score[is.na(dat$mfe.score)] <- 0
dat$gc.score[is.na(dat$gc.score)] <- 50
dat$distance[is.na(dat$distance)] <- 0
# dat$reads.mean.score[is.na(dat$reads.mean.score)] <- 0
dat$read.max.score[is.na(dat$read.max.score)] <- 0
# dat$cov.mean.score[is.na(dat$cov.mean.score)] <- 0
dat$cov.min.eval[is.na(dat$cov.min.eval)] <- 10
# dat$cov.combined.score[is.na(dat$cov.combined.score)] <- 0
# dat$cov.count[is.na(dat$cov.count)] <- 1
dat$motif.mean.score[is.na(dat$motif.mean.score)] <- 0
dat$motif.max.score[is.na(dat$motif.max.score)] <- 0
dat$motif_count[is.na(dat$motif_count)] <- 0
dat$motif.sum[is.na(dat$motif.sum)] <- 0
# dat$z_mean[is.na(dat$z_mean)] <- 10
dat$z_max[is.na(dat$z_max)] <- 10
# dat$alifold.score[is.na(dat$alifold.score)] <- 0
dat$alifold_cov_score[is.na(dat$alifold_cov_score)] <- 0
# dat$alifold_cov_score[dat$alifold_cov_score > 0] <- 0
return(dat)
}
load("~/bin/R/r_files/rf_classifier.Rda")
load("~/bin/R/r_files/randomForestDat.Rda")
load("~/bin/R/r_files/randomForestDatAll.Rda")
load("~/bin/R/r_files/randomForestTestDat_2.Rda")
load("~/bin/R/r_files/validation1_gz.Rda")
load("~/bin/R/r_files/indexes_gz.Rda")
load("~/bin/R/r_files/rf_classifier_gz.Rda")
validation1 <- randomForestTestDat[-indexes,]
validation1 <- replaceNAs(dat = validation1)
validation1 <- validation1 %>% filter(distance < 0.32) %>% select(read.max.score, distance, cov.min.eval, z_max, motif.max.score, alifold_cov_score, mfe.score, gc.score, srna.counts, motif.sum, group, ID)
set.seed(101)
randomNum <- runif(n = nrow(validation1), min = 0, max = 1)
validation1$random <- randomNum
colGroupNum <- match(x = "group", table = colnames(validation1))
colIDNum <- match(x = "ID", table = colnames(validation1))
prediction_for_roc_curve <- predict(rf_classifier,validation1[,-c(colIDNum, colGroupNum)],type="prob")
validation1$probability <- prediction_for_roc_curve[,2]
prediction_for_roc_curve
runApp('~/bin/example_problems_datasets/test_app')
validation1 <- validation1 %>% filter(distance < 0.32) %>% select(read.max.score, distance, cov.min.eval, z_max, motif.max.score, alifold_cov_score, mfe.score, gc.score, srna.counts, motif.sum, group, ID)
replaceNAs <- function(dat){
dat$mfe.score[is.na(dat$mfe.score)] <- 0
dat$gc.score[is.na(dat$gc.score)] <- 50
dat$distance[is.na(dat$distance)] <- 0
# dat$reads.mean.score[is.na(dat$reads.mean.score)] <- 0
dat$read.max.score[is.na(dat$read.max.score)] <- 0
# dat$cov.mean.score[is.na(dat$cov.mean.score)] <- 0
dat$cov.min.eval[is.na(dat$cov.min.eval)] <- 10
# dat$cov.combined.score[is.na(dat$cov.combined.score)] <- 0
# dat$cov.count[is.na(dat$cov.count)] <- 1
dat$motif.mean.score[is.na(dat$motif.mean.score)] <- 0
dat$motif.max.score[is.na(dat$motif.max.score)] <- 0
dat$motif_count[is.na(dat$motif_count)] <- 0
dat$motif.sum[is.na(dat$motif.sum)] <- 0
# dat$z_mean[is.na(dat$z_mean)] <- 10
dat$z_max[is.na(dat$z_max)] <- 10
# dat$alifold.score[is.na(dat$alifold.score)] <- 0
dat$alifold_cov_score[is.na(dat$alifold_cov_score)] <- 0
# dat$alifold_cov_score[dat$alifold_cov_score > 0] <- 0
return(dat)
}
load("~/bin/R/r_files/rf_classifier.Rda")
load("~/bin/R/r_files/randomForestDat.Rda")
load("~/bin/R/r_files/randomForestDatAll.Rda")
load("~/bin/R/r_files/randomForestTestDat_2.Rda")
load("~/bin/R/r_files/validation1_gz.Rda")
load("~/bin/R/r_files/indexes_gz.Rda")
load("~/bin/R/r_files/rf_classifier_gz.Rda")
validation1 <- randomForestTestDat[-indexes,]
validation1 <- replaceNAs(dat = validation1)
validation1 <- validation1 %>% filter(distance < 0.32) %>% select(read.max.score, distance, cov.min.eval, z_max, motif.max.score, alifold_cov_score, mfe.score, gc.score, srna.counts, motif.sum, group, ID)
set.seed(101)
randomNum <- runif(n = nrow(validation1), min = 0, max = 1)
validation1$random <- randomNum
colGroupNum <- match(x = "group", table = colnames(validation1))
colIDNum <- match(x = "ID", table = colnames(validation1))
prediction_for_roc_curve <- predict(rf_classifier,validation1[,-c(colIDNum, colGroupNum)],type="prob")
validation1$probability <- prediction_for_roc_curve[,2]
