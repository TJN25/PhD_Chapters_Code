prec <- tp/(tp+fp) ##precision
res <- probDat %>% group_by(group) %>% summarise(positive_res = round(mean(max_dist > threshold), 3)) %>% mutate(negative_res = 1 - positive_res)
return(list(sens, spec, prec, res))
}
View(probDat)
probDat <- predDat %>% bind_rows(validation2)
probDat <- probDat %>% dplyr::rename(max_dist = probability)
scoreProbabities(probDat = probDat, threshold = 0.5)
scoreProbabities <- function(probDat, threshold){
tp <- probDat %>% filter(group == "Positive Control", max_dist > threshold) %>% nrow()
fp <- probDat %>% filter(group == "Negative Control", max_dist > threshold) %>% nrow()
pos <- probDat %>% filter(group == "Positive Control") %>% nrow()
tn <- probDat %>% filter(group == "Negative Control", max_dist <= threshold) %>% nrow()
neg <- probDat %>% filter(group == "Negative Control") %>% nrow()
sens <- tp/pos ##sensitivity
spec <- tn/neg ##specificity
prec <- tp/(tp+fp) ##precision
fpr <- fp/neg
res <- probDat %>% group_by(group) %>% summarise(positive_res = round(mean(max_dist > threshold), 3)) %>% mutate(negative_res = 1 - positive_res)
return(list(sens, spec, prec, fpr, res))
}
probDat <- probDat %>% dplyr::rename(max_dist = probability)
scoreProbabities(probDat = probDat, threshold = 0.5)
View(probDat)
ows(validation2)
##This works out the values for sens/spec/precision
threshold <- 0.5
scoreProbabities <- function(probDat, threshold){
tp <- probDat %>% filter(group == "Positive Control", max_dist > threshold) %>% nrow()
fp <- probDat %>% filter(group == "Negative Control", max_dist > threshold) %>% nrow()
pos <- probDat %>% filter(group == "Positive Control") %>% nrow()
tn <- probDat %>% filter(group == "Negative Control", max_dist <= threshold) %>% nrow()
neg <- probDat %>% filter(group == "Negative Control") %>% nrow()
sens <- tp/pos ##sensitivity
spec <- tn/neg ##specificity
prec <- tp/(tp+fp) ##precision
fpr <- fp/neg
res <- probDat %>% group_by(group) %>% summarise(positive_res = round(mean(max_dist > threshold), 3)) %>% mutate(negative_res = 1 - positive_res)
return(list(sens, spec, prec, fpr, res))
}
inputDat <- probDat %>% dplyr::rename(max_dist = probability)
scoreProbabities(probDat = inputDa
probDat <- predDat %>% bind_rows(validation2)
load("~/bin/PhD_Chapters_Code/Chapter 3/chapter_3_files/predDat.Rda")
load("~/bin/PhD_Chapters_Code/Chapter 3/chapter_3_files/validatation2.Rda")
probDat <- predDat %>% bind_rows(validation2)
##This works out the values for sens/spec/precision
threshold <- 0.5
scoreProbabities <- function(probDat, threshold){
tp <- probDat %>% filter(group == "Positive Control", max_dist > threshold) %>% nrow()
fp <- probDat %>% filter(group == "Negative Control", max_dist > threshold) %>% nrow()
pos <- probDat %>% filter(group == "Positive Control") %>% nrow()
tn <- probDat %>% filter(group == "Negative Control", max_dist <= threshold) %>% nrow()
neg <- probDat %>% filter(group == "Negative Control") %>% nrow()
sens <- tp/pos ##sensitivity
spec <- tn/neg ##specificity
prec <- tp/(tp+fp) ##precision
fpr <- fp/neg
res <- probDat %>% group_by(group) %>% summarise(positive_res = round(mean(max_dist > threshold), 3)) %>% mutate(negative_res = 1 - positive_res)
return(list(sens, spec, prec, fpr, res))
}
inputDat <- probDat %>% dplyr::rename(max_dist = probability)
scoreProbabities(probDat = inputDat, threshold = 0.5)
scoreProbabities(probDat = inputDat, threshold = 0.3)
scoreProbabities(probDat = inputDat, threshold = 0.25)
scoreProbabities(probDat = inputDat, threshold = 0.2)
scoreProbabities(probDat = inputDat, threshold = 0.22)
scoreProbabities(probDat = inputDat, threshold = 0.21)
scoreProbabities(probDat = inputDat, threshold = 0.22)
scoreProbabities(probDat = inputDat, threshold = 0.05)
inputDat <- probDat %>% dplyr::rename(max_dist = distance)
scoreProbabities(probDat = inputDat, threshold = 0.05)
scoreProbabities(probDat = inputDat, threshold = 0.04)
scoreProbabities(probDat = inputDat, threshold = 0.03)
scoreProbabities(probDat = inputDat, threshold = 0.04)
inputDat <- probDat %>% dplyr::rename(max_dist = motif.max.score)
scoreProbabities(probDat = inputDat, threshold = 5)
scoreProbabities(probDat = inputDat, threshold = 10)
scoreProbabities(probDat = inputDat, threshold = 20)
scoreProbabities(probDat = inputDat, threshold = 15)
scoreProbabities(probDat = inputDat, threshold = 16)
scoreProbabities(probDat = inputDat, threshold = 15)
scoreProbabities(probDat = inputDat, threshold = 16)
scoreProbabities(probDat = inputDat, threshold = 100)
inputDat <- probDat %>% dplyr::rename(max_dist = read.max.score)
scoreProbabities(probDat = inputDat, threshold = 100)
scoreProbabities(probDat = inputDat, threshold = 50)
inputDat <- probDat %>% dplyr::rename(max_dist = read.max.score)
View(inputDat)
inputDat <- probDat %>% dplyr::rename(max_dist = read.max.score)
scoreProbabities(probDat = inputDat, threshold = 50)
scoreProbabities(probDat = inputDat, threshold = 100)
load("~/bin/PhD_Chapters_Code/Chapter 3/chapter_3_files/validatation2.Rda")
load("chapter_3_files/randomForestDat.Rda")
load("chapter_3_files/indexes_gz.Rda")
load("chapter_3_files/rf_classifier_gz.Rda")
##recreate validation where the reads data is kept
validation <- dat[-indexes,]
##keep reads and repeat previous filter steps
validation <- validation %>% mutate(motif.sum = motif.mean.score*motif_count) %>% filter(distance < 0.15) %>% select(read.max.score, distance, cov.min.eval, z_max, motif.max.score, alifold_cov_score, mfe.score, gc.score, motif.sum, group, ID) ##reads are still kept
set.seed(101)
randomNum <- runif(n = nrow(validation), min = 0, max = 1)
validation$random <- randomNum
colGroupNum <- match(x = "group", table = colnames(validation))
colIDNum <- match(x = "ID", table = colnames(validation))
#regenerate probability scores
prediction_for_roc_curve <- predict(rf_classifier,validation[,-c(colIDNum, colGroupNum)],type="prob")
validation$probability <- prediction_for_roc_curve[,2]
##get the number of times each ID was found expressed before redundancy was removed
redundacy_counts_pc <- read.table("chapter_3_files/pc_counts.txt")
colnames(redundacy_counts_pc) <- c("ID", "srna.counts.2")
validation <- validation %>% left_join(redundacy_counts_pc, by = "ID")
validation <- validation %>% select(read.max.score, distance, cov.min.eval, z_max, motif.max.score, alifold_cov_score, mfe.score, gc.score, srna.counts.2, group, ID, random, probability)
redundacy_counts_nc <- read.table("chapter_3_files/negative_control_counts.txt")
colnames(redundacy_counts_nc) <- c("srna.counts.3", "ID")
##adds the same counts data for the negative controls to validation that was added for the positive controls
validation <- validation %>% left_join(redundacy_counts_nc, by = "ID")
validation2 <- validation %>% mutate(srna.counts.2 = ifelse(is.na(srna.counts.2), srna.counts.3, srna.counts.2)) %>% select(-srna.counts.3)
View(validation)
View(validation)
load("chapter_3_files/randomForestDat.Rda")
load("chapter_3_files/indexes_gz.Rda")
load("chapter_3_files/rf_classifier_gz.Rda")
##recreate validation where the reads data is kept
validation <- dat[-indexes,]
##keep reads and repeat previous filter steps
validation <- validation %>% mutate(motif.sum = motif.mean.score*motif_count) %>% filter(distance < 0.15) %>% select(read.max.score, distance, cov.min.eval, z_max, motif.max.score, alifold_cov_score, mfe.score, gc.score, motif.sum, group, ID) ##reads are still kept
set.seed(101)
randomNum <- runif(n = nrow(validation), min = 0, max = 1)
validation$random <- randomNum
colGroupNum <- match(x = "group", table = colnames(validation))
colIDNum <- match(x = "ID", table = colnames(validation))
#regenerate probability scores
prediction_for_roc_curve <- predict(rf_classifier,validation[,-c(colIDNum, colGroupNum)],type="prob")
validation$probability <- prediction_for_roc_curve[,2]
View(validation)
##get the number of times each ID was found expressed before redundancy was removed
redundacy_counts_pc <- read.table("chapter_3_files/pc_counts.txt")
colnames(redundacy_counts_pc) <- c("ID", "srna.counts.2")
validation <- validation %>% left_join(redundacy_counts_pc, by = "ID")
validation <- validation %>% select(read.max.score, distance, cov.min.eval, z_max, motif.max.score, alifold_cov_score, mfe.score, gc.score, srna.counts.2, group, ID, random, probability)
redundacy_counts_nc <- read.table("chapter_3_files/negative_control_counts.txt")
colnames(redundacy_counts_nc) <- c("srna.counts.3", "ID")
##adds the same counts data for the negative controls to validation that was added for the positive controls
validation <- validation %>% left_join(redundacy_counts_nc, by = "ID")
validation2 <- validation %>% mutate(srna.counts.2 = ifelse(is.na(srna.counts.2), srna.counts.3, srna.counts.2)) %>% select(-srna.counts.3)
View(validation2)
validation2 <- validation %>% mutate(srna.counts.2 = ifelse(is.na(srna.counts.2), srna.counts.3, srna.counts.2)) %>% select(-srna.counts.3)
save(validation2, file = "chapter_3_files/validatation2.Rda")
```
```{r random_forest_predicted_data, eval=T}
load("chapter_3_files/rf_classifier_gz.Rda")
load("chapter_3_files/randomForestDat.Rda")
load("chapter_3_files/max_dists_pred.Rda")
load("chapter_3_files/predRDepth.Rda")
load("chapter_3_files/predCovariation.Rda")
load("chapter_3_files/predGC.Rda")
load("chapter_3_files/predAlifold.Rda")
load("chapter_3_files/predMFE.Rda")
load("chapter_3_files/predMotif.Rda")
load("chapter_3_files/predAlifoldScore.Rda")
load("chapter_3_files/predAliCov.Rda")
predSRNACounts <- read.table("chapter_3_files/predicted_snra_counts.txt")
colnames(predSRNACounts) <- c("srna.counts", "ID")
predDat <- predMFE %>%
full_join(predGC, by = "ID") %>%
full_join(max_dists_pred, by = "ID") %>%
full_join(predRDepth, by = "ID") %>%
full_join(predCovRNA, by = "ID") %>%
full_join(predMotif, by = "ID")%>%
full_join(predAlifold, by = "ID") %>%
full_join(predAliCov, by = "ID") %>%
full_join(predAlifoldScore, by = "ID") %>%
full_join(predSRNACounts, by = "ID") %>%
select(-cov.combined.score) %>%
mutate(group = "Predicted")
##indicates how many ids have been merged into the current id
redundacy_counts_pred <- read.table("chapter_3_files/predicted_counts.txt")
colnames(redundacy_counts_pred) <- c("srna.counts.2", "ID")
predDat <- predDat %>% left_join(redundacy_counts_pred, by = "ID")
predDat <- predDat %>% mutate(alifold_cov_score = as.numeric(alifold_cov_score))
predDat <- predDat %>% mutate(motif.sum = motif.mean.score*motif_count) %>% select(distance, cov.min.eval, z_max, motif.max.score, alifold_cov_score, mfe.score, gc.score, srna.counts.2, motif.sum, group, ID,  read.max.score, read.counts)
set.seed(101)
randomNum <- runif(n = nrow(predDat), min = 0, max = 1)
predDat$random <- randomNum
predDat$mfe.score[is.na(predDat$mfe.score)] <- 0
predDat$gc.score[is.na(predDat$gc.score)] <- 50
predDat$distance[is.na(predDat$distance)] <- 0
predDat$cov.min.eval[is.na(predDat$cov.min.eval)] <- 10
predDat$motif.max.score[is.na(predDat$motif.max.score)] <- 0
predDat$motif.sum[is.na(predDat$motif.sum)] <- 0
predDat$z_max[is.na(predDat$z_max)] <- 10
predDat <- predDat[predDat$z_max != -Inf,]
predDat$alifold_cov_score[is.na(predDat$alifold_cov_score)] <- 0
predDat$srna.counts[is.na(predDat$srna.counts)] <- 1
colGroupNum <- match(x = "group", table = colnames(predDat))
colIDNum <- match(x = "ID", table = colnames(predDat))
colCountNum <- match(x = "srna.counts.2", table = colnames(predDat))
predRfDat <- predDat %>% select(distance, cov.min.eval, z_max, alifold_cov_score, mfe.score, gc.score, motif.sum, random)
prediction_for_predcited_data <- predict(rf_classifier,predRfDat, type = 'response')
prob_for_predcited_data <- predict(rf_classifier,predRfDat, type = 'prob')
predDat$probability <- prob_for_predcited_data[,2]
save(predDat, file = "chapter_3_files/predDat.Rda")
##filters for features that are used in the analysis
featuresSelected <- dat %>% mutate(motif.sum = motif.mean.score*motif_count) %>% unique() %>% mutate(motif.sum = motif.mean.score*motif_count) %>% select(read.max.score, distance, cov.min.eval, z_max, motif.max.score, alifold_cov_score, mfe.score, gc.score, motif.sum, group)
##adds the predicted data to this dataset so that all data is included.
featuresSelected <- predDat %>% select(read.max.score, distance, cov.min.eval, z_max, motif.max.score, alifold_cov_score, mfe.score, gc.score, srna.counts, motif.sum, group) %>% bind_rows(featuresSelected) %>%
filter(!is.na(group))
save(featuresSelected, file="~/bin/PhD_Chapters_Code/Chapter 3/chapter_3_files/featuresSelected_gz.Rda")
```
### Plots
```{r plot_probabilities, eval=T}
load("~/bin/PhD_Chapters_Code/Chapter 3/chapter_3_files/pre
load("~/bin/PhD_Chapters_Code/Chapter 3/chapter_3_files/predDat.Rda")
load("~/bin/PhD_Chapters_Code/Chapter 3/chapter_3_files/validatation2.Rda")
load("~/bin/PhD_Chapters_Code/Chapter 3/chapter_3_files/predDat.Rda")
View(predDat)
load("chapter_3_files/randomForestDat.Rda")
load("chapter_3_files/indexes_gz.Rda")
load("chapter_3_files/rf_classifier_gz.Rda")
##recreate validation where the reads data is kept
validation <- dat[-indexes,]
##keep reads and repeat previous filter steps
validation <- validation %>% mutate(motif.sum = motif.mean.score*motif_count) %>% filter(distance < 0.15) %>% select(read.max.score, distance, cov.min.eval, z_max, motif.max.score, alifold_cov_score, mfe.score, gc.score, motif.sum, group, ID) ##reads are still kept
set.seed(101)
randomNum <- runif(n = nrow(validation), min = 0, max = 1)
validation$random <- randomNum
colGroupNum <- match(x = "group", table = colnames(validation))
colIDNum <- match(x = "ID", table = colnames(validation))
#regenerate probability scores
prediction_for_roc_curve <- predict(rf_classifier,validation[,-c(colIDNum, colGroupNum)],type="prob")
validation$probability <- prediction_for_roc_curve[,2]
##get the number of times each ID was found expressed before redundancy was removed
redundacy_counts_pc <- read.table("chapter_3_files/pc_counts.txt")
colnames(redundacy_counts_pc) <- c("ID", "srna.counts.2")
validation <- validation %>% left_join(redundacy_counts_pc, by = "ID")
validation <- validation %>% select(read.max.score, distance, cov.min.eval, z_max, motif.max.score, alifold_cov_score, mfe.score, gc.score, srna.counts.2, motif.sum %>% select(probability, ID, group, srna.counts.2) %>% bind_rows(validation2 %>% select(probability, ID, group, srna.counts.2)) %>% dplyr::rename(max_dist = probability)
countsCumul <- cumulativeCounts(dists = probDat, smooth = F)
load("chapter_3_files/randomForestDat.Rda")
load("chapter_3_files/indexes_gz.Rda")
load("chapter_3_files/rf_classifier_gz.Rda")
##recreate validation where the reads data is kept
validation <- dat[-indexes,]
##keep reads and repeat previous filter steps
validation <- validation %>% mutate(motif.sum = motif.mean.score*motif_count) %>% filter(distance < 0.15) %>% select(read.max.score, distance, cov.min.eval, z_max, motif.max.score, alifold_cov_score, mfe.score, gc.score, motif.sum, group, ID) ##reads are still kept
set.seed(101)
randomNum <- runif(n = nrow(validation), min = 0, max = 1)
validation$random <- randomNum
colGroupNum <- match(x = "group", table = colnames(validation))
colIDNum <- match(x = "ID", table = colnames(validation))
#regenerate probability scores
prediction_for_roc_curve <- predict(rf_classifier,validation[,-c(colIDNum, colGroupNum)],type="prob")
validation$probability <- prediction_for_roc_curve[,2]
##get the number of times each ID was found expressed before redundancy was removed
redundacy_counts_pc <- read.table("chapter_3_files/pc_counts.txt")
colnames(redundacy_counts_pc) <- c("ID", "srna.counts.2")
validation <- validation %>% left_join(redundacy_counts_pc, by = "ID")
validation <- validation %>% select(read.max.score, distance, cov.min.eval, z_max, motif.max.score, alifold_cov_score, mfe.score, gc.score, srna.counts.2, motif.sum, group, ID, random, probability)
redundacy_counts_nc <- read.table("chapter_3_files/negative_control_counts.txt")
colnames(redundacy_counts_nc) <- c("srna.counts.3", "ID")
##adds the same counts data for the negative controls to validation that was added for the positive controls
validation <- validation %>% left_join(redundacy_counts_nc, by = "ID")
validation2 <- validation %>% mutate(srna.counts.2 = ifelse(is.na(srna.counts.2), srna.counts.3, srna.counts.2)) %>% select(-srna.counts.3)
save(validation2, file = "chapter_3_files/validatation2.Rda")
load("~/bin/PhD_Chapters_Code/Chapter 3/chapter_3_files/predDat.Rda")
load("~/bin/PhD_Chapters_Code/Chapter 3/chapter_3_files/validatation2.Rda")
probDat <- predDat %>% select(probability, ID, group, srna.counts.2) %>% bind_rows(validation2 %>% select(probability, ID, group, srna.counts.2)) %>% dplyr::rename(max_dist = probability)
countsCumul <- cumulativeCounts(dists = probDat, smooth = F)
##produces plot to use for figure showing probabilty results
p <- ggplot() +
geom_line(data = countsCumul, aes(x= max_dist, y = cumulative_prop,
group = group, colour = group),
size = 1.5, show.legend = F)+
scale_y_continuous(trans = 'log10')
p + theme_classic()
load("~/bin/PhD_Chapters_Code/Chapter 3/chapter_3_files/predDat.Rda")
load("~/bin/PhD_Chapters_Code/Chapter 3/chapter_3_files/predDat.Rda")
load("~/bin/PhD_Chapters_Code/Chapter 3/chapter_3_files/validatation2.Rda")
probDat <- predDat %>% bind_rows(validation2)
##This works out the values for sens/spec/precision
threshold <- 0.5
scoreProbabities <- function(probDat, threshold){
tp <- probDat %>% filter(group == "Positive Control", max_dist > threshold) %>% nrow()
fp <- probDat %>% filter(group == "Negative Control", max_dist > threshold) %>% nrow()
pos <- probDat %>% filter(group == "Positive Control") %>% nrow()
tn <- probDat %>% filter(group == "Negative Control", max_dist <= threshold) %>% nrow()
neg <- probDat %>% filter(group == "Negative Control") %>% nrow()
sens <- tp/pos ##sensitivity
spec <- tn/neg ##specificity
prec <- tp/(tp+fp) ##precision
fpr <- fp/neg
res <- probDat %>% group_by(group) %>% summarise(positive_res = round(mean(max_dist > threshold), 3)) %>% mutate(negative_res = 1 - positive_res)
return(list(sens, spec, prec, fpr, res))
}
inputDat <- probDat %>% dplyr::rename(max_dist = probability)
scoreProbabities(probDat = inputDat, threshold = 0.22)
inputDat <- probDat %>% dplyr::rename(max_dist = distance)
scoreProbabities(probDat = inputDat, threshold = 0.04)
inputDat <- probDat %>% dplyr::rename(max_dist = motif.sum)
scoreProbabities(probDat = inputDat, threshold = 16)
scoreProbabities(probDat = inputDat, threshold = 10)
scoreProbabities(probDat = inputDat, threshold = 50)
scoreProbabities(probDat = inputDat, threshold = 30)
scoreProbabities(probDat = inputDat, threshold = 31)
scoreProbabities(probDat = inputDat, threshold = 33)
scoreProbabities(probDat = inputDat, threshold = 38)
scoreProbabities(probDat = inputDat, threshold = 36)
scoreProbabities(probDat = inputDat, threshold = 34)
scoreProbabities(probDat = inputDat, threshold = 35)
inputDat <- probDat %>% dplyr::rename(max_dist = read.max.score)
scoreProbabities(probDat = inputDat, threshold = 100)
View(probDat)
threshold = 100
robDat = inputDat
res <- probDat %>% group_by(group) %>% summarise(positive_res = round(mean(max_dist > threshold), 3)) %>% mutate(negative_res = 1 - positive_res)
View(probDat)
probDat = inputDat
res <- probDat %>% group_by(group) %>% summarise(positive_res = round(mean(max_dist > threshold), 3)) %>% mutate(negative_res = 1 - positive_res)
res <- probDat %>% group_by(group) %>% summarise(positive_res = round(mean(max_dist > threshold), 3)) %>% mutate(negative_res = 1 - positive_res)
res
probDat %>% group_by(group) %>% summarise(positive_res = round(mean(max_dist > threshold), 3))
probDat %>% group_by(group)
View(probDat)
probDat %>% filter(max_dist > 100) %>% group_by(group) %>% summarise(count = n())
probDat %>% filter(max_dist > threshold) %>% group_by(group) %>% summarise(count = n())
res <- probDat %>% group_by(group) %>% summarise(positive_res = mean(max_dist > threshold)) %>% mutate(negative_res = 1 - positive_res)
res
res <- probDat %>% group_by(group) %>% summarise(positive_res = mean(max_dist > threshold)) %>% mutate(negative_res = 1 - positive_res)
probDat %>% group_by(group) %>% summarise(positive_res = mean(max_dist > threshold)) %>% mutate(negative_res = 1 - positive_res)
probDat  %>% group_by(group) %>% summarise(count = sum(max_dist > 100))
load("~/bin/PhD_Chapters_Code/Chapter 3/chapter_3_files/predDat.Rda")
View(predDat)
res <- probDat %>% group_by(group) %>% summarise(positive_res = round(mean(max_dist > threshold, na.rm = T), 3)) %>% mutate(negative_res = 1 - positive_res)
View(res)
scoreProbabities <- function(probDat, threshold){
tp <- probDat %>% filter(group == "Positive Control", max_dist > threshold) %>% nrow()
fp <- probDat %>% filter(group == "Negative Control", max_dist > threshold) %>% nrow()
pos <- probDat %>% filter(group == "Positive Control") %>% nrow()
tn <- probDat %>% filter(group == "Negative Control", max_dist <= threshold) %>% nrow()
neg <- probDat %>% filter(group == "Negative Control") %>% nrow()
sens <- tp/pos ##sensitivity
spec <- tn/neg ##specificity
prec <- tp/(tp+fp) ##precision
fpr <- fp/neg
res <- probDat %>% group_by(group) %>% summarise(positive_res = round(mean(max_dist > threshold, na.rm = T), 3)) %>% mutate(negative_res = 1 - positive_res)
return(list(sens, spec, prec, fpr, res))
}
inputDat <- probDat %>% dplyr::rename(max_dist = probability)
scoreProbabities(probDat = inputDat, threshold = 0.22)
load("~/bin/PhD_Chapters_Code/Chapter 3/chapter_3_files/predDat.Rda")
load("~/bin/PhD_Chapters_Code/Chapter 3/chapter_3_files/validatation2.Rda")
probDat <- predDat %>% bind_rows(validation2)
##This works out the values for sens/spec/precision
threshold <- 0.5
scoreProbabities <- function(probDat, threshold){
tp <- probDat %>% filter(group == "Positive Control", max_dist > threshold) %>% nrow()
fp <- probDat %>% filter(group == "Negative Control", max_dist > threshold) %>% nrow()
pos <- probDat %>% filter(group == "Positive Control") %>% nrow()
tn <- probDat %>% filter(group == "Negative Control", max_dist <= threshold) %>% nrow()
neg <- probDat %>% filter(group == "Negative Control") %>% nrow()
sens <- tp/pos ##sensitivity
spec <- tn/neg ##specificity
prec <- tp/(tp+fp) ##precision
fpr <- fp/neg
res <- probDat %>% group_by(group) %>% summarise(positive_res = round(mean(max_dist > threshold, na.rm = T), 3)) %>% mutate(negative_res = 1 - positive_res)
return(list(sens, spec, prec, fpr, res))
}
inputDat <- probDat %>% dplyr::rename(max_dist = probability)
scoreProbabities(probDat = inputDat, threshold = 0.22)
inputDat <- probDat %>% dplyr::rename(max_dist = distance)
scoreProbabities(probDat = inputDat, threshold = 0.04)
inputDat <- probDat %>% dplyr::rename(max_dist = motif.sum)
scoreProbabities(probDat = inputDat, threshold = 35)
inputDat <- probDat %>% dplyr::rename(max_dist = read.max.score)
scoreProbabities(probDat = inputDat, threshold = 100)
scoreProbabities(probDat = inputDat, threshold = 50)
scoreProbabities(probDat = inputDat, threshold = 55)
scoreProbabities(probDat = inputDat, threshold = 53)
scoreProbabities(probDat = inputDat, threshold = 52)
inputDat <- probDat %>% dplyr::rename(max_dist = probability)
scoreProbabities(probDat = inputDat, threshold = 0.55)
scoreProbabities(probDat = inputDat, threshold = 0.6)
scoreProbabities(probDat = inputDat, threshold = 0.9)
scoreProbabities(probDat = inputDat, threshold = 0.7)
scoreProbabities(probDat = inputDat, threshold = 0.8)
scoreProbabities(probDat = inputDat, threshold = 0.75)
scoreProbabities(probDat = inputDat, threshold = 0.6)
inputDat <- probDat %>% dplyr::rename(max_dist = probability)
scoreProbabities(probDat = inputDat, threshold = 0.22)
inputDat <- probDat %>% dplyr::rename(max_dist = distance)
scoreProbabities(probDat = inputDat, threshold = 0.04)
inputDat <- probDat %>% dplyr::rename(max_dist = motif.sum)
scoreProbabities(probDat = inputDat, threshold = 35)
inputDat <- probDat %>% dplyr::rename(max_dist = read.max.score)
scoreProbabities(probDat = inputDat, threshold = 53)
inputDat <- probDat %>% dplyr::rename(max_dist = probability)
scoreProbabities(probDat = inputDat, threshold = 0.22)
inputDat <- probDat %>% dplyr::rename(max_dist = distance)
scoreProbabities(probDat = inputDat, threshold = 0.04)
inputDat <- probDat %>% dplyr::rename(max_dist = motif.sum)
scoreProbabities(probDat = inputDat, threshold = 35)
inputDat <- probDat %>% dplyr::rename(max_dist = -z_max)
scoreProbabities(probDat = inputDat, threshold = 3.5)
scoreProbabities(probDat = inputDat, threshold = 5)
inputDat <- probDat %>% dplyr::rename(max_dist = -z_max)
inputDat <- probDat %>% dplyr::rename(max_dist = -z_max)
inputDat <- probDat %>% mutate(max_dist = -z_max)
scoreProbabities(probDat = inputDat, threshold = 3.5)
scoreProbabities(probDat = inputDat, threshold = 3)
scoreProbabities(probDat = inputDat, threshold = 3.1)
inputDat <- probDat %>% dplyr::rename(max_dist = distance)
scoreProbabities(probDat = inputDat, threshold = 0.04)
outList <- list
scoreProbabities <- function(probDat, threshold){
tp <- probDat %>% filter(group == "Positive Control", max_dist > threshold) %>% nrow()
fp <- probDat %>% filter(group == "Negative Control", max_dist > threshold) %>% nrow()
pos <- probDat %>% filter(group == "Positive Control") %>% nrow()
tn <- probDat %>% filter(group == "Negative Control", max_dist <= threshold) %>% nrow()
neg <- probDat %>% filter(group == "Negative Control") %>% nrow()
sens <- tp/pos ##sensitivity
spec <- tn/neg ##specificity
prec <- tp/(tp+fp) ##precision
fpr <- fp/neg
res <- probDat %>% group_by(group) %>% summarise(positive_res = round(mean(max_dist > threshold), 3)) %>% mutate(negative_res = 1 - positive_res)
outList <- list()
outList$sensitivity <- sens
outList$precision <- prec
outList$fpr <- fpr
outList$res <- res
return(outList)
}
inputDat <- probDat %>% dplyr::rename(max_dist = probability)
scoreProbabities(probDat = inputDat, threshold = 0.22)
inputDat <- probDat %>% dplyr::rename(max_dist = distance)
scoreProbabities(probDat = inputDat, threshold = 0.04)
inputDat <- probDat %>% dplyr::rename(max_dist = motif.sum)
scoreProbabities(probDat = inputDat, threshold = 35)
inputDat <- probDat %>% mutate(max_dist = -z_max)
scoreProbabities(probDat = inputDat, threshold = 3.1)
inputDat <- probDat %>% dplyr::rename(max_dist = distance)
scoreProbabities(probDat = inputDat, threshold = 0.04)
inputDat <- probDat %>% mutate(max_dist = -z_max)
scoreProbabities(probDat = inputDat, threshold = 3.1)
inputDat <- probDat %>% dplyr::rename(max_dist = motif.sum)
scoreProbabities(probDat = inputDat, threshold = 35)
inputDat <- probDat %>% dplyr::rename(max_dist = probability)
scoreProbabities(probDat = inputDat, threshold = 0.22)
inputDat <- probDat %>% dplyr::rename(max_dist = probability)
scoreProbabities(probDat = inputDat, threshold = 0.22)
inputDat <- probDat %>% dplyr::rename(max_dist = distance)
scoreProbabities(probDat = inputDat, threshold = 0.04)
inputDat <- probDat %>% dplyr::rename(max_dist = motif.sum)
scoreProbabities(probDat = inputDat, threshold = 35)
inputDat <- probDat %>% mutate(max_dist = -z_max)
scoreProbabities(probDat = inputDat, threshold = 3.1)
inputDat <- probDat %>% dplyr::rename(max_dist = distance)
scoreProbabities(probDat = inputDat, threshold = 0.04)
inputDat <- probDat %>% mutate(max_dist = -z_max)
scoreProbabities(probDat = inputDat, threshold = 3.1)
inputDat <- probDat %>% dplyr::rename(max_dist = motif.sum)
scoreProbabities(probDat = inputDat, threshold = 35)
inputDat <- probDat %>% dplyr::rename(max_dist = probability)
scoreProbabities(probDat = inputDat, threshold = 0.22)
scoreProbabities(probDat = inputDat, threshold = 0.7)
inputDat <- probDat %>% dplyr::rename(max_dist = probability)
scoreProbabities(probDat = inputDat, threshold = 0.7)
scoreProbabities(probDat = inputDat, threshold = 0.8)
scoreProbabities(probDat = inputDat, threshold = 0.5)
scoreProbabities(probDat = inputDat, threshold = 0.85 )
scoreProbabities(probDat = inputDat, threshold = 0.81)
scoreProbabities(probDat = inputDat, threshold = 0.8)
scoreProbabities(probDat = inputDat, threshold = 0.805)
scoreProbabities(probDat = inputDat, threshold = 0.81)
inputDat <- probDat %>% dplyr::rename(max_dist = probability)
probDat = inputDat
threshold = 0.81
View(probDat)
load("~/bin/PhD_Chapters_Code/Chapter 3/chapter_3_files/predDat.Rda")
load("~/bin/PhD_Chapters_Code/Chapter 3/chapter_3_files/validatation2.Rda")
probDat <- predDat %>% bind_rows(validation2)
##This works out the values for sens/spec/precision
threshold <- 0.5
scoreProbabities <- function(probDat, threshold){
tp <- probDat %>% filter(group == "Positive Control", max_dist > threshold) %>% nrow()
fp <- probDat %>% filter(group == "Negative Control", max_dist > threshold) %>% nrow()
pos <- probDat %>% filter(group == "Positive Control") %>% nrow()
tn <- probDat %>% filter(group == "Negative Control", max_dist <= threshold) %>% nrow()
neg <- probDat %>% filter(group == "Negative Control") %>% nrow()
sens <- tp/pos ##sensitivity
spec <- tn/neg ##specificity
prec <- tp/(tp+fp) ##precision
fpr <- fp/neg
res <- probDat %>% group_by(group) %>% summarise(positive_res = round(mean(max_dist > threshold), 3)) %>% mutate(negative_res = 1 - positive_res)
outList <- list()
outList$sensitivity <- sens
outList$precision <- prec
outList$fpr <- fpr
outList$res <- res
return(outList)
}
inputDat <- probDat %>% dplyr::rename(max_dist = probability)
scoreProbabities(probDat = inputDat, threshold = 0.81)
inputDat <- probDat %>% dplyr::rename(max_dist = distance)
scoreProbabities(probDat = inputDat, threshold = 0.04)
inputDat <- probDat %>% dplyr::rename(max_dist = motif.sum)
scoreProbabities(probDat = inputDat, threshold = 35)
inputDat <- probDat %>% mutate(max_dist = -z_max)
scoreProbabities(probDat = inputDat, threshold = 3.1)
probDatExpanded <- probDat %>% uncount(srna.counts.2)
probDatExpanded %>% filter(group == "Predicted", probability > 0.81)
probDatExpanded %>% filter(group == "Predicted", probability > 0.81) %>% nrow()
probDatExpanded %>% filter(group == "Predicted", probability > 0.81) %>% select(ID) %>% unique() %>% nrow()
