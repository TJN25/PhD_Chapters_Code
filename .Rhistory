scoreProbabities(probDat = inputDat, threshold = 35)
inputDat <- probDat %>% dplyr::rename(max_dist = probability)
scoreProbabities(probDat = inputDat, threshold = 0.22)
inputDat <- probDat %>% dplyr::rename(max_dist = probability)
scoreProbabities(probDat = inputDat, threshold = 0.22)
inputDat <- probDat %>% dplyr::rename(max_dist = distance)
scoreProbabities(probDat = inputDat, threshold = 0.04)
inputDat <- probDat %>% dplyr::rename(max_dist = motif.sum)
scoreProbabities(probDat = inputDat, threshold = 35)
inputDat <- probDat %>% mutate(max_dist = -z_max)
scoreProbabities(probDat = inputDat, threshold = 3.1)
inputDat <- probDat %>% dplyr::rename(max_dist = distance)
scoreProbabities(probDat = inputDat, threshold = 0.04)
inputDat <- probDat %>% mutate(max_dist = -z_max)
scoreProbabities(probDat = inputDat, threshold = 3.1)
inputDat <- probDat %>% dplyr::rename(max_dist = motif.sum)
scoreProbabities(probDat = inputDat, threshold = 35)
inputDat <- probDat %>% dplyr::rename(max_dist = probability)
scoreProbabities(probDat = inputDat, threshold = 0.22)
scoreProbabities(probDat = inputDat, threshold = 0.7)
inputDat <- probDat %>% dplyr::rename(max_dist = probability)
scoreProbabities(probDat = inputDat, threshold = 0.7)
scoreProbabities(probDat = inputDat, threshold = 0.8)
scoreProbabities(probDat = inputDat, threshold = 0.5)
scoreProbabities(probDat = inputDat, threshold = 0.85 )
scoreProbabities(probDat = inputDat, threshold = 0.81)
scoreProbabities(probDat = inputDat, threshold = 0.8)
scoreProbabities(probDat = inputDat, threshold = 0.805)
scoreProbabities(probDat = inputDat, threshold = 0.81)
inputDat <- probDat %>% dplyr::rename(max_dist = probability)
probDat = inputDat
threshold = 0.81
View(probDat)
load("~/bin/PhD_Chapters_Code/Chapter 3/chapter_3_files/predDat.Rda")
load("~/bin/PhD_Chapters_Code/Chapter 3/chapter_3_files/validatation2.Rda")
probDat <- predDat %>% bind_rows(validation2)
##This works out the values for sens/spec/precision
threshold <- 0.5
scoreProbabities <- function(probDat, threshold){
tp <- probDat %>% filter(group == "Positive Control", max_dist > threshold) %>% nrow()
fp <- probDat %>% filter(group == "Negative Control", max_dist > threshold) %>% nrow()
pos <- probDat %>% filter(group == "Positive Control") %>% nrow()
tn <- probDat %>% filter(group == "Negative Control", max_dist <= threshold) %>% nrow()
neg <- probDat %>% filter(group == "Negative Control") %>% nrow()
sens <- tp/pos ##sensitivity
spec <- tn/neg ##specificity
prec <- tp/(tp+fp) ##precision
fpr <- fp/neg
res <- probDat %>% group_by(group) %>% summarise(positive_res = round(mean(max_dist > threshold), 3)) %>% mutate(negative_res = 1 - positive_res)
outList <- list()
outList$sensitivity <- sens
outList$precision <- prec
outList$fpr <- fpr
outList$res <- res
return(outList)
}
inputDat <- probDat %>% dplyr::rename(max_dist = probability)
scoreProbabities(probDat = inputDat, threshold = 0.81)
inputDat <- probDat %>% dplyr::rename(max_dist = distance)
scoreProbabities(probDat = inputDat, threshold = 0.04)
inputDat <- probDat %>% dplyr::rename(max_dist = motif.sum)
scoreProbabities(probDat = inputDat, threshold = 35)
inputDat <- probDat %>% mutate(max_dist = -z_max)
scoreProbabities(probDat = inputDat, threshold = 3.1)
probDatExpanded <- probDat %>% uncount(srna.counts.2)
probDatExpanded %>% filter(group == "Predicted", probability > 0.81)
probDatExpanded %>% filter(group == "Predicted", probability > 0.81) %>% nrow()
probDatExpanded %>% filter(group == "Predicted", probability > 0.81) %>% select(ID) %>% unique() %>% nrow()
knitr::opts_chunk$set(echo = TRUE)
options(warn = -1)
library(tidyverse)
library(devtools)
library(kableExtra)
library(randomForest)
library(ggpubr)
library(gplots)
library(ROSE)
setwd("~/bin/PhD_Chapters_Code/Chapter 3/")
cumulativeCounts <- function(dists, smooth = T){
groups <- unique(dists$group)
for(i in groups){
dat <- dists %>% filter(group == i)
dat <- dat %>% mutate(count = 1) %>%
arrange(-max_dist) %>% group_by(group) %>%
mutate(cumulativeCount = cumsum(count)) %>% ungroup() %>%
group_by(group, max_dist) %>% summarise(cumulative_prop = max(cumulativeCount)/ nrow(dat))
if(smooth){
dat <- as.data.frame(spline(x = dat$max_dist,y =  dat$cumulative_prop))
}
dat <- dat %>% ungroup() %>% mutate(group = i)
if(exists('combinedDat')){
combinedDat <- combinedDat %>% bind_rows(dat)
}else{
combinedDat <- dat
}
}
return(combinedDat)
}
cumulativeDistribution <- function(dat, run.ks.test = T, alternative_pred, alternative_pc, alternative = 'two.sided', show.legend = F){
if(missing('alternative_pred')){alternative_pred <- alternative}
if(missing('alternative_pc')){alternative_pc <- alternative}
distsCumulativeCount <- cumulativeCounts(dists = dat, smooth = F)
distsCumulativeCount <- distsCumulativeCount %>% filter(group != "Predicted Known")
p <- ggplot() +
geom_line(data = distsCumulativeCount, aes(x= max_dist, y = cumulative_prop, group = group, colour = group), size = 1, show.legend = show.legend) + theme_classic()
if(run.ks.test == T){
pos <- dat %>% filter(group == "Positive Control")
neg <- dat %>% filter(group == "Negative Control")
pred <- dat %>% filter(group == "Predicted")
res <- ks.test(x = pred$max_dist, y = neg$max_dist, alternative = alternative_pred)
print(res)
res <- ks.test(x = pos$max_dist, y = neg$max_dist, alternative = alternative_pc)
print(res)
}
return(p)
}
readDepthsSetup <- function(file_path){
readsColName <- c("mean.val", "max.val", "counts.above.threshold", "ID", "genus")
reads.dat <- read.table(file_path, as.is = T, stringsAsFactors = F)
colnames(reads.dat) <- readsColName
reads.max <- reads.dat  %>% group_by(ID) %>% summarise(read.max.score  =  sum(max.val))
reads.mean <- reads.dat %>%
group_by(ID) %>%
summarise(reads.mean.score  = sum(mean.val))
reads.count <- reads.dat %>%
group_by(ID) %>%
filter(max.val > 0) %>%
summarise(max.val = max(max.val), read.counts  = n()) %>%
select(-max.val)
reads.dat <- reads.max %>% full_join(reads.mean, by = "ID")
reads.dat <- reads.dat %>% full_join(reads.count, by = "ID")
return(reads.dat)
}
rscapeCovarianceSetup <- function(file_path){
cov.dat <- read.table(file_path, sep = "\t", comment.char = "#", as.is = T, header = F, fill = T, col.names = c("V1", "left_pos", "right_pos", "score", "e.value", "substitutions", "V2", "power", "ID"))
cov.dat <- cov.dat %>% select(ID, score, e.value, power)
cov.mean <- cov.dat %>% group_by(ID) %>% summarise(cov.mean.score = max(score))
cov.count <- cov.dat %>% group_by(ID) %>% summarise(cov.count = n())
cov.max <- cov.dat %>% group_by(ID) %>% summarise(cov.min.eval = min(e.value))
cov.power <- cov.dat %>% group_by(ID) %>% summarise(power = sum(power))
cov.dat <- cov.mean %>% full_join(cov.max, by = "ID") %>%
full_join(cov.count, by = "ID") %>%
full_join(cov.power, by = "ID")
cov.dat <- cov.dat %>% filter(!is.na(cov.mean.score)) %>% mutate(cov.combined.score = cov.count * cov.mean.score)
return(cov.dat)
}
gcSetup <- function(file_path){
dat <- read.table(file_path)
colnames(dat) <- c("counts", "letter", "ID")
datTotals <- dat %>% group_by(ID) %>% summarise(total = sum(counts))
dat <- dat %>% filter(letter %in% c("C", "G")) %>% group_by(ID) %>% summarise(gc.count = sum(counts)) %>% left_join(datTotals, by = "ID") %>%
mutate(gc.score = (gc.count/total)*100) %>% select(ID, gc.score)
return(dat)
}
alifoldSetup <- function(file_path){
dat<- read.table(file_path, header = F, comment.char = "#", quote = "", sep = "",   fill = T, as.is = T, col.names = c( "From",      "To",    "Strand",    "Native.MFE",    "Mean.MFE",     "STDV",        "Z", "ID"))
dat <- dat %>% filter(ID != "")
datSD <- dat %>% select(ID, STDV)
datMean <- dat %>% group_by(ID) %>% summarise(z_mean = mean(as.numeric(Z), na.rm = T))
datMax <- dat %>% group_by(ID) %>% summarise(z_max = max(as.numeric(Z), na.rm = T))
dat <- datMean %>% full_join(datMax, by = "ID") %>% full_join(datSD, by = "ID") %>%
filter(!is.nan(STDV)) %>% select(-STDV) %>% unique()
return(dat)
}
motifSetup <- function(file_path){
dat <- read.table(file_path, sep = "", comment.char = "#", as.is = T, header = F, fill = T)
colnames(dat) <- c("seqname", "source", "feature", "start", "end", "score", "strand", "frame", "attribute", "ID")
dat <- dat %>% group_by(feature, start, end, strand, ID) %>% summarise(score = max(score))
datMean <- dat %>% group_by(ID) %>% summarise(motif.mean.score = mean(score))
datMax <- dat %>% group_by(ID) %>% summarise(motif.max.score = max(score))
datCount <- dat %>% group_by(ID) %>% summarise(motif_count = n())
dat <- datMean %>% full_join(datMax, by = "ID") %>%
full_join(datCount, by = "ID")
return(dat)
}
replaceNAs <- function(dat){
dat$mfe.score[is.na(dat$mfe.score)] <- 0
dat$gc.score[is.na(dat$gc.score)] <- 50
dat$distance[is.na(dat$distance)] <- 0
dat$reads.mean.score[is.na(dat$reads.mean.score)] <- 0
dat$read.max.score[is.na(dat$read.max.score)] <- 0
dat$cov.mean.score[is.na(dat$cov.mean.score)] <- 0
dat$cov.min.eval[is.na(dat$cov.min.eval)] <- 10
# dat$cov.combined.score[is.na(dat$cov.combined.score)] <- 0
dat$cov.count[is.na(dat$cov.count)] <- 1
dat$read.counts[is.na(dat$read.counts)] <- 0
dat$motif.mean.score[is.na(dat$motif.mean.score)] <- 0
dat$motif.max.score[is.na(dat$motif.max.score)] <- 0
dat$motif_count[is.na(dat$motif_count)] <- 0
dat$z_mean[is.na(dat$z_mean)] <- 10
dat$z_max[is.na(dat$z_max)] <- 10
dat <- dat[dat$z_max != -Inf,]
dat$alifold.score[is.na(dat$alifold.score)] <- 0
dat$alifold_cov_score[is.na(dat$alifold_cov_score)] <- 0
# dat$alifold_cov_score[dat$alifold_cov_score > 0] <- 0
return(dat)
}
knitr::opts_chunk$set(echo = TRUE)
options(warn = -1)
# suppressMessages(library(comparativeSRA))
library(tidyverse)
library(VennDiagram)
library(shiny)
library(ggplot2)
library(gplots)
library(viridis)
library(RColorBrewer)
library(stringi)
#library(plyr)
library(devtools)
#library(tidyr)
library(shinyjs)
library(shinyWidgets)
library(DT)
library(lubridate)
library(dplyr)
library(svglite)
library(genoPlotR)
library(drake)
library(ape)
# library(Biostrings)
# library(ggtree)
# library(treeio)
# library(geiger)
library(ROSE)
library(reshape2)
library(igraph)
library("viridis")
library(randomForest)
library(ROCR)
library(corrplot)
library(kableExtra)
library(reticulate)
library(rjson)
# library(GenomicRanges)
# library(comparativeSRA)
library(ggpubr)
library(UpSetR)
filePath <- "~/bin/PhD_Chapters_Code/Chapter 3/"
# use_python("/Users/thomasnicholson/anaconda3/bin/python")
# use_condaenv("comparativesrna")
# source('~/Downloads/R-master/render_toc.R')
load("~/Downloads/R-master/r_files/distanceMelt.Rda")
contig_labels <- read.table("~/phd/RNASeq/genome_contig_pairs.txt")
load("~/Downloads/R-master/r_files/distanceMelt.Rda")
View(meltDat)
load(file = "~/Downloads/R-master/r_files/featuresSelected_v2.Rda")
load("~/Downloads/R-master/r_files/randomForestDatAll.Rda")
genus_selection <- read.table("~/Downloads/python_git/python_files/genera_list.txt")
genus_selection <- read.table("~/Downloads/python_git/python_files/genera_list.txt")
load('~/Downloads/R-master/r_files/upsetSubsetPredicted.Rda')
sumsUpset <- colSums(upsetSubsetPredicted)
sumsDat <- data.frame(ID = colnames(upsetSubsetPredicted), sums = sumsUpset)
analysed_genomes <- c("Escherichia", "Shigella", "Salmonella", "Enterobacter", "Klebsiella","Serratia", "Edwardsiella", "Erwinia", "Photorhabdus", "Yersinia", "Alteromonas", "Acinetobacter", "Pseudomonas", "Methylomicrobium", "Stenotrophomonas", "Xanthomonas", "Xylella", "Lysobacter")
cols_order <- match(analysed_genomes, sumsDat$ID)
sumsDat <- sumsDat[cols_order,]
sumsDat$genome_count <- c(6, 3, 5, 4, 3, 3, 1, 1, 2, 5, 4, 4,6, 1, 2, 3, 1, 1)
sumsDat$rnaseq_count <- c(53, 22, 44, 21, 15, 33, 5, 5, 4, 2, 23, 36, 64, 5, 10, 20, 5, 6)
sumsDat <- sumsDat %>% mutate(srnas_genome_adj  = sums/genome_count,
srnas_rnaseq_adj  = sums/rnaseq_count)
fit <- lm(sums~rnaseq_count, data = sumsDat)
summary(fit)
summary(fit)
ggplot() +
geom_point(data = sumsDat, aes(x = rnaseq_count, y = sums)) +
geom_abline(intercept = 141.679, slope = 6.991)
ggplot() +
geom_histogram(data = sumsDat, aes(x = sums), binwidth = 100)
ggplot() +
geom_point(data  = sumsDat, aes(x = genome_count, y = sums), color = "blue") +
geom_point(data  = sumsDat, aes(x = rnaseq_count, y = sums), color = "red")
tree_order <- c("Escherichia", "Shigella", "Salmonella", "Enterobacter", "Klebsiella", "Plautia", "Citrobacter","Serratia", "Wigglesworthia", "Buchnera", "Sodalis", "Lonsdalea", "Brenneria", "Dickeya", "Edwardsiella", "Pantoea", "Erwinia", "Proteus", "Providencia", "Xenorhabdus", "Photorhabdus", "Mannheimia", "Aggregatibacter", "Alishewanella", "Actinobacillus", "Yersinia", "Vibrio", "Alteromonas", "Agarivorans", "Pseudoalteromonas", "Moritella", "Shewanella", "Psychrobacter", "Moraxella", "Acinetobacter", "Azotobacter", "Pseudomonas", "Marinobacter", "Methylomicrobium", "Methylomonas", "Cycloclasticus", "Methylococcus", "Francisella", "Pseudoxanthomonas", "Stenotrophomonas", "Xanthomonas", "Xylella", "Lysobacter", "Candidatus")
cols_order <- match(tree_order, colnames(upsetSubsetPredicted))
tmp <- data.frame(tree_order, cols_order)
upsetSubsetPredicted <- upsetSubsetPredicted[,cols_order]
sumsUpset <- rowSums(upsetSubsetPredicted)
sumsDat <- data.frame(ID = row.names(upsetSubsetPredicted), sums = sumsUpset)
upsetSubsetPC <- upsetSubsetPredicted
UpSetR::upset(upsetSubsetPredicted, sets = colnames(upsetSubsetPredicted), mb.ratio = c(0.55, 0.45), order.by = "freq", keep.order = T)
knitr::opts_chunk$set(echo = TRUE)
options(warn = -1)
# suppressMessages(library(comparativeSRA))
library(tidyverse)
library(VennDiagram)
library(shiny)
library(ggplot2)
library(gplots)
library(viridis)
library(RColorBrewer)
library(stringi)
#library(plyr)
library(devtools)
#library(tidyr)
library(shinyjs)
library(shinyWidgets)
library(DT)
library(lubridate)
library(dplyr)
library(svglite)
library(genoPlotR)
library(drake)
library(ape)
# library(Biostrings)
# library(ggtree)
# library(treeio)
# library(geiger)
library(ROSE)
library(reshape2)
library(igraph)
library("viridis")
library(randomForest)
library(ROCR)
library(corrplot)
library(kableExtra)
library(reticulate)
library(rjson)
# library(GenomicRanges)
# library(comparativeSRA)
library(ggpubr)
library(UpSetR)
filePath <- "~/bin/PhD_Chapters_Code/Chapter 3/"
# use_python("/Users/thomasnicholson/anaconda3/bin/python")
# use_condaenv("comparativesrna")
# source('~/Downloads/R-master/render_toc.R')
UpSetR::upset(upsetSubsetPredicted, sets = colnames(upsetSubsetPredicted), mb.ratio = c(0.55, 0.45), order.by = "freq", keep.order = T)
genus_selection <- read.table("~/Downloads/python_git/python_files/genera_list.txt")
load("~/bin/PhD_Chapters_Code/Chapter 3/chapter_3_files/predDat.Rda")
load("~/bin/PhD_Chapters_Code/Chapter 3/chapter_3_files/validatation2.Rda")
probDat <- predDat %>% select(probability, ID, group, srna.counts.2) %>% bind_rows(validation2 %>% select(probability, ID, group, srna.counts.2)) %>% dplyr::rename(max_dist = probability)
countsCumul <- cumulativeCounts(dists = probDat, smooth = F)
##produces plot to use for figure showing probabilty results
p <- ggplot() +
geom_line(data = countsCumul, aes(x= max_dist, y = cumulative_prop,
group = group, colour = group),
size = 1.5, show.legend = F)+
scale_y_continuous(trans = 'log10')
p + theme_classic()
View(countsCumul)
View(probDat)
?randomforest
??randomforest
```{r score_values, eval=TRUE}
load("~/bin/PhD_Chapters_Code/Chapter 3/chapter_3_files/predDat.Rda")
load("~/bin/PhD_Chapters_Code/Chapter 3/chapter_3_files/predDat.Rda")
View(predDat)
load("chapter_3_files/featuresSelected_gz.Rda")
featuresSelected %>% group_by(group) %>% summarise(count = n())
load("chapter_3_files/randomForestDat.Rda")
randomForestDatAll %>% group_by(group) %>% summarise(count = n())
load("chapter_3_files/randomForestDat.Rda")
load("chapter_3_files/randomForestDat.Rda")
load("chapter_3_files/max_dists_pc.Rda")
load("chapter_3_files/max_dists_nc.Rda")
load("chapter_3_files/pcRDepth.Rda")
load("chapter_3_files/ncRDepth.Rda")
load("chapter_3_files/pcCovariation.Rda")
load("chapter_3_files/ncCovariation.Rda")
load("chapter_3_files/pcGC.Rda")
load("chapter_3_files/ncGC.Rda")
load("chapter_3_files/pcAlifold.Rda")
load("chapter_3_files/ncAlifold.Rda")
load("chapter_3_files/pcMFE.Rda")
load("chapter_3_files/ncMFE.Rda")
load("chapter_3_files/pcMotif.Rda")
load("chapter_3_files/ncMotif.Rda")
load("chapter_3_files/pcCovAli.Rda")
load("chapter_3_files/ncCovAli.Rda")
load("chapter_3_files/pcAlifoldScore.Rda")
load("chapter_3_files/ncAlifoldScore.Rda")
pcSRNACounts <- read.table("chapter_3_files/positive_control_snra_counts.txt")
ncSRNACounts <- read.table("chapter_3_files/negative_control_snra_counts.txt")
colnames(pcSRNACounts) <- c("srna.counts", "ID")
colnames(ncSRNACounts) <- c("srna.counts", "ID")
pcDat <- pcMFE %>%
full_join(pcGC, by = "ID") %>%
full_join(max_dists_pc, by = "ID") %>%
full_join(pcRDepth, by = "ID") %>%
full_join(pcCov, by = "ID") %>%
full_join(pcMotif, by = "ID")%>%
full_join(pcAlifold, by = "ID") %>%
full_join(pcAliCov, by = "ID") %>%
full_join(pcAlifoldScore, by = "ID") %>%
full_join(pcSRNACounts, by = "ID") %>%
mutate(group = "Positive Control") %>%
unique()
ncDat <- ncMFE %>%
full_join(ncGC, by = "ID") %>%
full_join(max_dists_nc, by = "ID") %>%
full_join(ncRDepth, by = "ID") %>%
full_join(ncCovRNA, by = "ID") %>%
full_join(ncMotif, by = "ID")%>%
full_join(ncAlifold, by = "ID") %>%
full_join(ncAliCov, by = "ID") %>%
full_join(ncAlifoldScore, by = "ID") %>%
full_join(ncSRNACounts, by = "ID") %>%
mutate(group = "Negative Control")
ncDat <- ncDat %>% filter(reads.mean.score < 15)##ensure that the RINCs are not transcribed,  in order to compare untranscribed regions to transcribed sRNAs
View(ncDat)
ncDat <- ncMFE %>%
full_join(ncGC, by = "ID") %>%
full_join(max_dists_nc, by = "ID") %>%
full_join(ncRDepth, by = "ID") %>%
full_join(ncCovRNA, by = "ID") %>%
full_join(ncMotif, by = "ID")%>%
full_join(ncAlifold, by = "ID") %>%
full_join(ncAliCov, by = "ID") %>%
full_join(ncAlifoldScore, by = "ID") %>%
full_join(ncSRNACounts, by = "ID") %>%
mutate(group = "Negative Control")
pcDat <- pcMFE %>%
full_join(pcGC, by = "ID") %>%
full_join(max_dists_pc, by = "ID") %>%
full_join(pcRDepth, by = "ID") %>%
full_join(pcCov, by = "ID") %>%
full_join(pcMotif, by = "ID")%>%
full_join(pcAlifold, by = "ID") %>%
full_join(pcAliCov, by = "ID") %>%
full_join(pcAlifoldScore, by = "ID") %>%
full_join(pcSRNACounts, by = "ID") %>%
mutate(group = "Positive Control") %>%
unique()
pcDat <- pcMFE %>%
full_join(pcGC, by = "ID") %>%
full_join(max_dists_pc, by = "ID") %>%
full_join(pcRDepth, by = "ID") %>%
full_join(pcCov, by = "ID") %>%
full_join(pcMotif, by = "ID")%>%
full_join(pcAlifold, by = "ID") %>%
full_join(pcAliCov, by = "ID") %>%
full_join(pcAlifoldScore, by = "ID") %>%
full_join(pcSRNACounts, by = "ID") %>%
mutate(group = "Positive Control")
View(pcDat)
pcDat <- pcMFE %>%
full_join(pcGC, by = "ID") %>%
full_join(max_dists_pc, by = "ID") %>%
full_join(pcRDepth, by = "ID") %>%
full_join(pcCov, by = "ID") %>%
full_join(pcMotif, by = "ID")%>%
full_join(pcAlifold, by = "ID") %>%
full_join(pcAliCov, by = "ID") %>%
full_join(pcAlifoldScore, by = "ID") %>%
full_join(pcSRNACounts, by = "ID") %>%
mutate(group = "Positive Control") %>%
unique()
ncDat <- ncMFE %>%
full_join(ncGC, by = "ID") %>%
full_join(max_dists_nc, by = "ID") %>%
full_join(ncRDepth, by = "ID") %>%
full_join(ncCovRNA, by = "ID") %>%
full_join(ncMotif, by = "ID")%>%
full_join(ncAlifold, by = "ID") %>%
full_join(ncAliCov, by = "ID") %>%
full_join(ncAlifoldScore, by = "ID") %>%
full_join(ncSRNACounts, by = "ID") %>%
mutate(group = "Negative Control")
ncDat <- ncDat %>% filter(reads.mean.score < 15)##ensure that the RINCs are not transcribed,  in order to compare untranscribed regions to transcribed sRNAs
dat <- pcDat %>% bind_rows(ncDat) %>% select(-cov.combined.score)
dat <- replaceNAs(dat = dat)
dat <- dat %>%
unique() %>%
mutate(motif.sum = motif.mean.score*motif_count)
dat %>% group_by(group) %>% summarise(n())
load("~/bin/PhD_Chapters_Code/Chapter 3/chapter_3_files/predDat.Rda")
View(predDat)
View(predDat)
load("~/bin/PhD_Chapters_Code/Chapter 3/chapter_3_files/predDat.Rda")
load("~/bin/PhD_Chapters_Code/Chapter 3/chapter_3_files/validatation2.Rda")
probDat <- predDat %>% bind_rows(validation2)
##This works out the values for sens/spec/precision
threshold <- 0.5
scoreProbabities <- function(probDat, threshold){
tp <- probDat %>% filter(group == "Positive Control", max_dist > threshold) %>% nrow()
fp <- probDat %>% filter(group == "Negative Control", max_dist > threshold) %>% nrow()
pos <- probDat %>% filter(group == "Positive Control") %>% nrow()
tn <- probDat %>% filter(group == "Negative Control", max_dist <= threshold) %>% nrow()
neg <- probDat %>% filter(group == "Negative Control") %>% nrow()
sens <- tp/pos ##sensitivity
spec <- tn/neg ##specificity
prec <- tp/(tp+fp) ##precision
fpr <- fp/neg
res <- probDat %>% group_by(group) %>% summarise(positive_res = round(mean(max_dist > threshold), 3)) %>% mutate(negative_res = 1 - positive_res)
outList <- list()
outList$sensitivity <- sens
outList$precision <- prec
outList$fpr <- fpr
outList$res <- res
return(outList)
}
inputDat <- probDat %>% dplyr::rename(max_dist = probability)
scoreProbabities(probDat = inputDat, threshold = 0.81)
scoreProbabities(probDat = inputDat, threshold = 0.5)
inputDat <- probDat %>% dplyr::rename(max_dist = probability)
scoreProbabities(probDat = inputDat, threshold = 0.22)
inputDat <- probDat %>% dplyr::rename(max_dist = probability)
View(inputDat)
threshold
threshold = 0.81
inputDat <- probDat %>% dplyr::rename(max_dist = probability)
scoreProbabities(probDat = inputDat, threshold = 0.60)
scoreProbabities(probDat = inputDat, threshold = 0.70)
scoreProbabities(probDat = inputDat, threshold = 0.80)
scoreProbabities(probDat = inputDat, threshold = 0.81)
scoreProbabities(probDat = inputDat, threshold = 0.82)
scoreProbabities(probDat = inputDat, threshold = 0.81)
##number of expressed regions classified
probDatExpanded %>% filter(group == "Predicted", probability > 0.81) %>% nrow()
probDatExpanded <- probDat %>% uncount(srna.counts.2)
##number of expressed regions classified
probDatExpanded %>% filter(group == "Predicted", probability > 0.81) %>% nrow()
##number of predicted rufs classified
probDatExpanded %>% filter(group == "Predicted", probability > 0.81) %>% select(ID) %>% unique() %>% nrow()
