predDat <- predDat %>% left_join(redundacy_counts_pred, by = "ID")
predDat <- predDat %>% mutate(alifold_cov_score = as.numeric(alifold_cov_score))
predDat <- predDat %>% mutate(motif.sum = motif.mean.score*motif_count) %>% select(distance, cov.min.eval, z_max, motif.max.score, alifold_cov_score, mfe.score, gc.score, srna.counts.2, motif.sum, group, ID,  read.max.score, read.counts)
set.seed(101)
randomNum <- runif(n = nrow(predDat), min = 0, max = 1)
predDat$random <- randomNum
predDat$mfe.score[is.na(predDat$mfe.score)] <- 0
predDat$gc.score[is.na(predDat$gc.score)] <- 50
predDat$distance[is.na(predDat$distance)] <- 0
predDat$cov.min.eval[is.na(predDat$cov.min.eval)] <- 10
predDat$motif.max.score[is.na(predDat$motif.max.score)] <- 0
predDat$motif.sum[is.na(predDat$motif.sum)] <- 0
predDat$z_max[is.na(predDat$z_max)] <- 10
predDat <- predDat[predDat$z_max != -Inf,]
predDat$alifold_cov_score[is.na(predDat$alifold_cov_score)] <- 0
predDat$srna.counts[is.na(predDat$srna.counts)] <- 1
colGroupNum <- match(x = "group", table = colnames(predDat))
colIDNum <- match(x = "ID", table = colnames(predDat))
colCountNum <- match(x = "srna.counts.2", table = colnames(predDat))
predRfDat <- predDat %>% select(distance, cov.min.eval, z_max, alifold_cov_score, mfe.score, gc.score, motif.sum, random)
prediction_for_predcited_data <- predict(rf_classifier,predRfDat, type = 'response')
prob_for_predcited_data <- predict(rf_classifier,predRfDat, type = 'prob')
predDat$probability <- prob_for_predcited_data[,2]
save(predDat, file = "chapter_3_files/predDat.Rda")
##filters for features that are used in the analysis
featuresSelected <- dat %>% mutate(motif.sum = motif.mean.score*motif_count) %>% unique() %>% mutate(motif.sum = motif.mean.score*motif_count) %>% select(read.max.score, distance, cov.min.eval, z_max, motif.max.score, alifold_cov_score, mfe.score, gc.score, motif.sum, group)
##adds the predicted data to this dataset so that all data is included.
featuresSelected <- predDat %>% select(read.max.score, distance, cov.min.eval, z_max, motif.max.score, alifold_cov_score, mfe.score, gc.score, srna.counts, motif.sum, group) %>% bind_rows(featuresSelected) %>%
filter(!is.na(group))
save(featuresSelected, file="~/bin/PhD_Chapters_Code/Chapter 3/chapter_3_files/featuresSelected_gz.Rda")
load("~/bin/PhD_Chapters_Code/Chapter 3/chapter_3_files/predDat.Rda")
load("~/bin/PhD_Chapters_Code/Chapter 3/chapter_3_files/validatation2.Rda")
probDat <- predDat %>% select(probability, ID, group, srna.counts.2) %>% filter(group == "Predicted") %>% bind_rows(validation2 %>% select(probability, ID, group, srna.counts.2)) %>% dplyr::rename(max_dist = probability)
##duplicate rows based on the number of original sequences
##this will give an indication of the proportion of expressed regions that are predicted to be sRNAs
probDatExpanded <- probDat %>% uncount(srna.counts.2)
countsCumul <- cumulativeCounts(dists = probDat, smooth = F)
##produces plot to use for figure showing probabilty results
p <- ggplot() +
geom_line(data = countsCumul, aes(x= max_dist, y = cumulative_prop,
group = group, colour = group),
size = 1.5, show.legend = F)+
scale_y_continuous(trans = 'log10')
p + theme_classic()
p
##This works out the values for sens/spec/precision
threshold <- 0.5
probDatExpanded %>% group_by(group) %>% summarise(freq = mean(max_dist <= threshold))
tp <- probDatExpanded %>% filter(group == "Positive Control", max_dist > threshold) %>% nrow()
fp <- probDatExpanded %>% filter(group == "Negative Control", max_dist > threshold) %>% nrow()
pos <- probDatExpanded %>% filter(group == "Positive Control") %>% nrow()
tn <- probDatExpanded %>% filter(group == "Negative Control", max_dist <= threshold) %>% nrow()
neg <- probDatExpanded %>% filter(group == "Negative Control") %>% nrow()
tp/pos
tn/neg
tp/(tp+fp)
load("chapter_3_files/featuresSelected_gz.Rda")
dat <- featuresSelected %>% dplyr::rename(max_dist = distance)
distance.p <- cumulativeDistribution(dat, alternative = "two.sided")
distance.p <- distance.p +
labs(y = "Cumulative Proportion", x = "Evolutionary distance")
##known sRNAs and predicted RUFs are only selected if there is read depths. For a fair comparison, RINCs with read depths of 0 are removed.
dat <- featuresSelected %>% select(group, read.max.score) %>% dplyr::rename(max_dist = read.max.score) %>% filter(max_dist > 0)
reads.p <- cumulativeDistribution(dat, alternative = 'two.sided', show.legend = F)
reads.p <- reads.p +
labs(y = "Cumulative Proportion", x = "Total reads")+
scale_x_continuous(trans = "log10")
dat <- featuresSelected %>% mutate(max_dist = -log(cov.min.eval))
rscape.p <- cumulativeDistribution(dat)
rscape.p <- rscape.p +
labs(y = "Cumulative Proportion", x = "Rscape covariance score")
##none of the z scores are greater than 3, so the NA value of 10 is changed to 3 (then the negaive is taken for the plot)
dat <- featuresSelected %>% mutate(max_dist = ifelse(z_max == 10, -3, -z_max)) %>% select(group, max_dist)
z.p <- cumulativeDistribution(dat, show.legend = F)
z.p <- z.p +
labs(y = "Cumulative Proportion", x = "Alifold z-score (negative energy)")
# z.p
##selected a window where the values are easier to visualise. This has removed 16 known sRNAs and 9 predicted RUFs
dat <- featuresSelected %>% dplyr::rename(max_dist = motif.sum) %>% filter(max_dist < 1000)
motif.p <- cumulativeDistribution(dat)
motif.p <- motif.p +
labs(y = "Cumulative Proportion", x = "Motif score")
dat <- featuresSelected %>% mutate(max_dist = -alifold_cov_score) %>% mutate(max_dist = ifelse(max_dist < 0, 0, max_dist))
alifold.cov.p <- cumulativeDistribution(dat)
alifold.cov.p <- alifold.cov.p +
labs(y = "Cumulative Proportion", x = "Alifold covariance score")
dat <- featuresSelected %>% mutate(max_dist = -mfe.score)
mfe.p <- cumulativeDistribution(dat, alternative = 'two.sided')
mfe.p <- mfe.p +
labs(y = "Cumulative Proportion", x = "MFE score (negative energy)")
dat <- featuresSelected %>% filter(group != "Predicted Known") %>% arrange(gc.score) %>% mutate(gc.score = round(gc.score))
predCounts <- dat %>% filter(group == "Predicted") %>% group_by(gc.score) %>% summarise(count = n()) %>% arrange(gc.score) %>% ungroup() %>% tidyr::complete(gc.score = seq(from = 0, to = 100, by = 1), fill = list(count = 0))
pcCounts <- dat %>% filter(group == "Positive Control") %>% group_by(gc.score) %>% summarise(count = n()) %>% arrange(gc.score) %>% ungroup() %>% tidyr::complete(gc.score = seq(from = 0, to = 100, by = 1), fill = list(count = 0))
ncCounts <- dat %>% filter(group == "Negative Control") %>% group_by(gc.score) %>% summarise(count = n()) %>% arrange(gc.score) %>% ungroup() %>% tidyr::complete(gc.score = seq(from = 0, to = 100, by = 1), fill = list(count = 0))
pcTotal <- dat %>% filter(group == "Positive Control") %>% nrow()
ncTotal <- dat %>% filter(group == "Negative Control") %>% nrow()
predTotal <- dat %>% filter(group == "Predicted") %>% nrow()
pcGC <- zoo::zoo(pcCounts$count)
ncGC <- zoo::zoo(ncCounts$count)
predGC <- zoo::zoo(predCounts$count)
smoothPC <- zoo::rollapply(pcGC, width = 10, by = 1, FUN = mean, align = "center", partial = T)
smoothNC <- zoo::rollapply(ncGC, width = 10, by = 1, FUN = mean, align = "center", partial = T)
smoothPred <- zoo::rollapply(predGC, width = 10, by = 1, FUN = mean, align = "center", partial = T)
smoothPC <- as.data.frame(smoothPC) %>% mutate(x = row_number() -1) %>% mutate(group = "Positive Control") %>% dplyr::rename(y = smoothPC) %>% mutate(y = y/pcTotal)
smoothNC <- as.data.frame(smoothNC) %>% mutate(x = row_number() -1) %>% mutate(group = "Negative Control") %>% dplyr::rename(y = smoothNC) %>% mutate(y = y/ncTotal)
smoothPred <- as.data.frame(smoothPred) %>% mutate(x = row_number() -1) %>% mutate(group = "Predicted") %>% dplyr::rename(y = smoothPred) %>% mutate(y = y/predTotal)
smoothGC <- smoothPC %>%  bind_rows(smoothNC, smoothPred)
gc.p <- ggplot() +
geom_path(data = smoothGC, aes(x = x, y = y, group = group, color = group), size = 1, show.legend = FALSE)  + labs(y = "Proportion", x = "GC percentage")  + theme_classic()
pos <- dat %>% filter(group == "Positive Control")
neg <- dat %>% filter(group == "Negative Control")
pred <- dat %>% filter(group == "Predicted")
res <- ks.test(x = pred$gc.score, y = neg$gc.score, alternative = 'less')
print(res)
res <- ks.test(x = pos$gc.score, y = neg$gc.score, alternative = 'two.sided')
print(res)
all.p <- ggarrange(distance.p, reads.p, mfe.p, z.p, rscape.p, alifold.cov.p,  motif.p, gc.p + rremove("x.text"),
labels = LETTERS[1:9],
ncol = 3, nrow = 3)
all.p
load("chapter_3_files/predCovAli.Rda")
View(predCovAli)
load("chapter_3_files/rf_classifier_gz.Rda")
load("chapter_3_files/randomForestDat.Rda")
load("chapter_3_files/max_dists_pred.Rda")
load("chapter_3_files/predRDepth.Rda")
load("chapter_3_files/predCovariation.Rda")
load("chapter_3_files/predGC.Rda")
load("chapter_3_files/predAlifold.Rda")
load("chapter_3_files/predMFE.Rda")
load("chapter_3_files/predMotif.Rda")
load("chapter_3_files/predAlifoldScore.Rda")
load("chapter_3_files/predAliCov.Rda")
predSRNACounts <- read.table("chapter_3_files/predicted_snra_counts.txt")
colnames(predSRNACounts) <- c("srna.counts", "ID")
predDat <- predMFE %>%
full_join(predGC, by = "ID") %>%
full_join(max_dists_pred, by = "ID") %>%
full_join(predRDepth, by = "ID") %>%
full_join(predCovRNA, by = "ID") %>%
full_join(predMotif, by = "ID")%>%
full_join(predAlifold, by = "ID") %>%
left_join(predAliCov, by = "ID") %>%
full_join(predAlifoldScore, by = "ID") %>%
full_join(predSRNACounts, by = "ID") %>%
select(-cov.combined.score) %>%
mutate(group = "Predicted")
predDat <- predMFE %>%
full_join(predGC, by = "ID") %>%
full_join(max_dists_pred, by = "ID") %>%
full_join(predRDepth, by = "ID") %>%
full_join(predCovRNA, by = "ID") %>%
full_join(predMotif, by = "ID")%>%
full_join(predAlifold, by = "ID") %>%
full_join(predAliCov, by = "ID") %>%
full_join(predAlifoldScore, by = "ID") %>%
full_join(predSRNACounts, by = "ID") %>%
select(-cov.combined.score) %>%
mutate(group = "Predicted")
load("chapter_3_files/rf_classifier_gz.Rda")
load("chapter_3_files/randomForestDat.Rda")
load("chapter_3_files/max_dists_pred.Rda")
load("chapter_3_files/predRDepth.Rda")
load("chapter_3_files/predCovariation.Rda")
load("chapter_3_files/predGC.Rda")
load("chapter_3_files/predAlifold.Rda")
load("chapter_3_files/predMFE.Rda")
load("chapter_3_files/predMotif.Rda")
load("chapter_3_files/predAlifoldScore.Rda")
load("chapter_3_files/predAliCov.Rda")
predSRNACounts <- read.table("chapter_3_files/predicted_snra_counts.txt")
colnames(predSRNACounts) <- c("srna.counts", "ID")
predDat <- predMFE %>%
full_join(predGC, by = "ID") %>%
full_join(max_dists_pred, by = "ID") %>%
full_join(predRDepth, by = "ID") %>%
full_join(predCovRNA, by = "ID") %>%
full_join(predMotif, by = "ID")%>%
full_join(predAlifold, by = "ID") %>%
full_join(predAliCov, by = "ID") %>%
full_join(predAlifoldScore, by = "ID") %>%
full_join(predSRNACounts, by = "ID") %>%
select(-cov.combined.score) %>%
mutate(group = "Predicted")
##indicates how many ids have been merged into the current id
redundacy_counts_pred <- read.table("chapter_3_files/predicted_counts.txt")
colnames(redundacy_counts_pred) <- c("srna.counts.2", "ID")
predDat <- predDat %>% left_join(redundacy_counts_pred, by = "ID")
predDat <- predDat %>% mutate(alifold_cov_score = as.numeric(alifold_cov_score))
predDat <- predDat %>% mutate(motif.sum = motif.mean.score*motif_count) %>% select(distance, cov.min.eval, z_max, motif.max.score, alifold_cov_score, mfe.score, gc.score, srna.counts.2, motif.sum, group, ID,  read.max.score, read.counts)
set.seed(101)
randomNum <- runif(n = nrow(predDat), min = 0, max = 1)
predDat$random <- randomNum
predDat$mfe.score[is.na(predDat$mfe.score)] <- 0
predDat$gc.score[is.na(predDat$gc.score)] <- 50
predDat$distance[is.na(predDat$distance)] <- 0
predDat$cov.min.eval[is.na(predDat$cov.min.eval)] <- 10
predDat$motif.max.score[is.na(predDat$motif.max.score)] <- 0
predDat$motif.sum[is.na(predDat$motif.sum)] <- 0
predDat$z_max[is.na(predDat$z_max)] <- 10
predDat <- predDat[predDat$z_max != -Inf,]
predDat$alifold_cov_score[is.na(predDat$alifold_cov_score)] <- 0
predDat$srna.counts[is.na(predDat$srna.counts)] <- 1
colGroupNum <- match(x = "group", table = colnames(predDat))
colIDNum <- match(x = "ID", table = colnames(predDat))
colCountNum <- match(x = "srna.counts.2", table = colnames(predDat))
predRfDat <- predDat %>% select(distance, cov.min.eval, z_max, alifold_cov_score, mfe.score, gc.score, motif.sum, random)
prediction_for_predcited_data <- predict(rf_classifier,predRfDat, type = 'response')
prob_for_predcited_data <- predict(rf_classifier,predRfDat, type = 'prob')
predDat$probability <- prob_for_predcited_data[,2]
save(predDat, file = "chapter_3_files/predDat.Rda")
##filters for features that are used in the analysis
featuresSelected <- dat %>% mutate(motif.sum = motif.mean.score*motif_count) %>% unique() %>% mutate(motif.sum = motif.mean.score*motif_count) %>% select(read.max.score, distance, cov.min.eval, z_max, motif.max.score, alifold_cov_score, mfe.score, gc.score, motif.sum, group)
##adds the predicted data to this dataset so that all data is included.
featuresSelected <- predDat %>% select(read.max.score, distance, cov.min.eval, z_max, motif.max.score, alifold_cov_score, mfe.score, gc.score, srna.counts, motif.sum, group) %>% bind_rows(featuresSelected) %>%
filter(!is.na(group))
save(featuresSelected, file="~/bin/PhD_Chapters_Code/Chapter 3/chapter_3_files/featuresSelected_gz.Rda")
load("~/bin/PhD_Chapters_Code/Chapter 3/chapter_3_files/predDat.Rda")
load("~/bin/PhD_Chapters_Code/Chapter 3/chapter_3_files/validatation2.Rda")
probDat <- predDat %>% select(probability, ID, group, srna.counts.2) %>% filter(group == "Predicted") %>% bind_rows(validation2 %>% select(probability, ID, group, srna.counts.2)) %>% dplyr::rename(max_dist = probability)
##duplicate rows based on the number of original sequences
##this will give an indication of the proportion of expressed regions that are predicted to be sRNAs
probDatExpanded <- probDat %>% uncount(srna.counts.2)
countsCumul <- cumulativeCounts(dists = probDat, smooth = F)
##produces plot to use for figure showing probabilty results
p <- ggplot() +
geom_line(data = countsCumul, aes(x= max_dist, y = cumulative_prop,
group = group, colour = group),
size = 1.5, show.legend = F)+
scale_y_continuous(trans = 'log10')
p + theme_classic()
p
##This works out the values for sens/spec/precision
threshold <- 0.5
probDatExpanded %>% group_by(group) %>% summarise(freq = mean(max_dist <= threshold))
tp <- probDatExpanded %>% filter(group == "Positive Control", max_dist > threshold) %>% nrow()
fp <- probDatExpanded %>% filter(group == "Negative Control", max_dist > threshold) %>% nrow()
pos <- probDatExpanded %>% filter(group == "Positive Control") %>% nrow()
tn <- probDatExpanded %>% filter(group == "Negative Control", max_dist <= threshold) %>% nrow()
neg <- probDatExpanded %>% filter(group == "Negative Control") %>% nrow()
tp/pos
tn/neg
tp/(tp+fp)
write_data <- T
if(write_data){
ggsave(filename = "~/bin/PhD_Chapters_Code/Chapter 3/chapter_3_svgs/probabilites_rf_log_gz.svg", plot = p, width = 178, height = 155, units = "mm")
}
load("~/bin/PhD_Chapters_Code/Chapter 3/chapter_3_files/predDat.Rda")
load("~/bin/PhD_Chapters_Code/Chapter 3/chapter_3_files/validatation2.Rda")
probDat <- predDat %>% select(probability, ID, group, srna.counts.2) %>% filter(group == "Predicted") %>% bind_rows(validation2 %>% select(probability, ID, group, srna.counts.2)) %>% dplyr::rename(max_dist = probability)
##duplicate rows based on the number of original sequences
##this will give an indication of the proportion of expressed regions that are predicted to be sRNAs
probDatExpanded <- probDat %>% uncount(srna.counts.2)
countsCumul <- cumulativeCounts(dists = probDat, smooth = F)
##produces plot to use for figure showing probabilty results
p <- ggplot() +
geom_line(data = countsCumul, aes(x= max_dist, y = cumulative_prop,
group = group, colour = group),
size = 1.5, show.legend = F)+
scale_y_continuous(trans = 'log10')
p + theme_classic()
p
##This works out the values for sens/spec/precision
threshold <- 0.5
probDatExpanded %>% group_by(group) %>% summarise(freq = mean(max_dist <= threshold))
tp <- probDatExpanded %>% filter(group == "Positive Control", max_dist > threshold) %>% nrow()
fp <- probDatExpanded %>% filter(group == "Negative Control", max_dist > threshold) %>% nrow()
pos <- probDatExpanded %>% filter(group == "Positive Control") %>% nrow()
tn <- probDatExpanded %>% filter(group == "Negative Control", max_dist <= threshold) %>% nrow()
neg <- probDatExpanded %>% filter(group == "Negative Control") %>% nrow()
tp/pos
tn/neg
tp/(tp+fp)
write_data <- T
if(write_data){
ggsave(filename = "~/bin/PhD_Chapters_Code/Chapter 3/chapter_3_svgs/probabilites_rf_log_gz.svg", plot = p, width = 178, height = 155, units = "mm")
}
load("chapter_3_files/featuresSelected_gz.Rda")
##function written using max_dist as column name so each variable needs to  be renamed to this before using cumulativeDistribution()
dat <- featuresSelected %>% dplyr::rename(max_dist = distance)
distance.p <- cumulativeDistribution(dat, alternative = "two.sided")
distance.p <- distance.p +
labs(y = "Cumulative Proportion", x = "Evolutionary distance")
##known sRNAs and predicted RUFs are only selected if there is read depths. For a fair comparison, RINCs with read depths of 0 are removed.
dat <- featuresSelected %>% select(group, read.max.score) %>% dplyr::rename(max_dist = read.max.score) %>% filter(max_dist > 0)
reads.p <- cumulativeDistribution(dat, alternative = 'two.sided', show.legend = F)
reads.p <- reads.p +
labs(y = "Cumulative Proportion", x = "Total reads")+
scale_x_continuous(trans = "log10")
#reads.p
dat <- featuresSelected %>% mutate(max_dist = -log(cov.min.eval))
rscape.p <- cumulativeDistribution(dat)
rscape.p <- rscape.p +
labs(y = "Cumulative Proportion", x = "Rscape covariance score")
# rscape.p
##none of the z scores are greater than 3, so the NA value of 10 is changed to 3 (then the negaive is taken for the plot)
dat <- featuresSelected %>% mutate(max_dist = ifelse(z_max == 10, -3, -z_max)) %>% select(group, max_dist)
z.p <- cumulativeDistribution(dat, show.legend = F)
z.p <- z.p +
labs(y = "Cumulative Proportion", x = "Alifold z-score (negative energy)")
# z.p
##selected a window where the values are easier to visualise. This has removed 16 known sRNAs and 9 predicted RUFs
dat <- featuresSelected %>% dplyr::rename(max_dist = motif.sum) %>% filter(max_dist < 1000)
motif.p <- cumulativeDistribution(dat)
motif.p <- motif.p +
labs(y = "Cumulative Proportion", x = "Motif score")
dat <- featuresSelected %>% mutate(max_dist = -alifold_cov_score) %>% mutate(max_dist = ifelse(max_dist < 0, 0, max_dist))
alifold.cov.p <- cumulativeDistribution(dat)
alifold.cov.p <- alifold.cov.p +
labs(y = "Cumulative Proportion", x = "Alifold covariance score")
dat <- featuresSelected %>% mutate(max_dist = -mfe.score)
mfe.p <- cumulativeDistribution(dat, alternative = 'two.sided')
mfe.p <- mfe.p +
labs(y = "Cumulative Proportion", x = "MFE score (negative energy)")
dat <- featuresSelected %>% filter(group != "Predicted Known") %>% arrange(gc.score) %>% mutate(gc.score = round(gc.score))
predCounts <- dat %>% filter(group == "Predicted") %>% group_by(gc.score) %>% summarise(count = n()) %>% arrange(gc.score) %>% ungroup() %>% tidyr::complete(gc.score = seq(from = 0, to = 100, by = 1), fill = list(count = 0))
pcCounts <- dat %>% filter(group == "Positive Control") %>% group_by(gc.score) %>% summarise(count = n()) %>% arrange(gc.score) %>% ungroup() %>% tidyr::complete(gc.score = seq(from = 0, to = 100, by = 1), fill = list(count = 0))
ncCounts <- dat %>% filter(group == "Negative Control") %>% group_by(gc.score) %>% summarise(count = n()) %>% arrange(gc.score) %>% ungroup() %>% tidyr::complete(gc.score = seq(from = 0, to = 100, by = 1), fill = list(count = 0))
pcTotal <- dat %>% filter(group == "Positive Control") %>% nrow()
ncTotal <- dat %>% filter(group == "Negative Control") %>% nrow()
predTotal <- dat %>% filter(group == "Predicted") %>% nrow()
pcGC <- zoo::zoo(pcCounts$count)
ncGC <- zoo::zoo(ncCounts$count)
predGC <- zoo::zoo(predCounts$count)
smoothPC <- zoo::rollapply(pcGC, width = 10, by = 1, FUN = mean, align = "center", partial = T)
smoothNC <- zoo::rollapply(ncGC, width = 10, by = 1, FUN = mean, align = "center", partial = T)
smoothPred <- zoo::rollapply(predGC, width = 10, by = 1, FUN = mean, align = "center", partial = T)
smoothPC <- as.data.frame(smoothPC) %>% mutate(x = row_number() -1) %>% mutate(group = "Positive Control") %>% dplyr::rename(y = smoothPC) %>% mutate(y = y/pcTotal)
smoothNC <- as.data.frame(smoothNC) %>% mutate(x = row_number() -1) %>% mutate(group = "Negative Control") %>% dplyr::rename(y = smoothNC) %>% mutate(y = y/ncTotal)
smoothPred <- as.data.frame(smoothPred) %>% mutate(x = row_number() -1) %>% mutate(group = "Predicted") %>% dplyr::rename(y = smoothPred) %>% mutate(y = y/predTotal)
smoothGC <- smoothPC %>%  bind_rows(smoothNC, smoothPred)
gc.p <- ggplot() +
geom_path(data = smoothGC, aes(x = x, y = y, group = group, color = group), size = 1, show.legend = FALSE)  + labs(y = "Proportion", x = "GC percentage")  + theme_classic()
pos <- dat %>% filter(group == "Positive Control")
neg <- dat %>% filter(group == "Negative Control")
pred <- dat %>% filter(group == "Predicted")
res <- ks.test(x = pred$gc.score, y = neg$gc.score, alternative = 'less')
print(res)
res <- ks.test(x = pos$gc.score, y = neg$gc.score, alternative = 'two.sided')
print(res)
all.p <- ggarrange(distance.p, reads.p, mfe.p, z.p, rscape.p, alifold.cov.p,  motif.p, gc.p + rremove("x.text"),
labels = LETTERS[1:9],
ncol = 3, nrow = 3)
all.p
run_all <- T
if(run_all){
ggsave(filename = "~/bin/PhD_Chapters_Code/Chapter 3/chapter_3_svgs/all_distributions.svg", plot = all.p, width = 450, height = 307, units = "mm")
}
ncAliCov <- read.table("chapter_3_files/negative_control_alifold_covariation.txt")
View(ncAliCov)
ncAliCov <- read.table("chapter_3_files/negative_control_alifold_covariation.txt")
load("chapter_3_files/featuresSelected_gz.Rda")
##function written using max_dist as column name so each variable needs to  be renamed to this before using cumulativeDistribution()
dat <- featuresSelected %>% dplyr::rename(max_dist = distance)
distance.p <- cumulativeDistribution(dat, alternative = "two.sided")
distance.p <- distance.p +
labs(y = "Cumulative Proportion", x = "Evolutionary distance")
##known sRNAs and predicted RUFs are only selected if there is read depths. For a fair comparison, RINCs with read depths of 0 are removed.
dat <- featuresSelected %>% select(group, read.max.score) %>% dplyr::rename(max_dist = read.max.score) %>% filter(max_dist > 0)
reads.p <- cumulativeDistribution(dat, alternative = 'two.sided', show.legend = F)
reads.p <- reads.p +
labs(y = "Cumulative Proportion", x = "Total reads")+
scale_x_continuous(trans = "log10")
#reads.p
dat <- featuresSelected %>% mutate(max_dist = -log(cov.min.eval))
rscape.p <- cumulativeDistribution(dat)
rscape.p <- rscape.p +
labs(y = "Cumulative Proportion", x = "Rscape covariance score")
# rscape.p
##none of the z scores are greater than 3, so the NA value of 10 is changed to 3 (then the negaive is taken for the plot)
dat <- featuresSelected %>% mutate(max_dist = ifelse(z_max == 10, -3, -z_max)) %>% select(group, max_dist)
z.p <- cumulativeDistribution(dat, show.legend = F)
z.p <- z.p +
labs(y = "Cumulative Proportion", x = "Alifold z-score (negative energy)")
# z.p
##selected a window where the values are easier to visualise. This has removed 16 known sRNAs and 9 predicted RUFs
dat <- featuresSelected %>% dplyr::rename(max_dist = motif.sum) %>% filter(max_dist < 1000)
motif.p <- cumulativeDistribution(dat)
motif.p <- motif.p +
labs(y = "Cumulative Proportion", x = "Motif score")
dat <- featuresSelected %>% mutate(max_dist = -alifold_cov_score)
alifold.cov.p <- cumulativeDistribution(dat)
alifold.cov.p <- alifold.cov.p +
labs(y = "Cumulative Proportion", x = "Alifold covariance score")
dat <- featuresSelected %>% mutate(max_dist = -mfe.score)
mfe.p <- cumulativeDistribution(dat, alternative = 'two.sided')
mfe.p <- mfe.p +
labs(y = "Cumulative Proportion", x = "MFE score (negative energy)")
dat <- featuresSelected %>% filter(group != "Predicted Known") %>% arrange(gc.score) %>% mutate(gc.score = round(gc.score))
predCounts <- dat %>% filter(group == "Predicted") %>% group_by(gc.score) %>% summarise(count = n()) %>% arrange(gc.score) %>% ungroup() %>% tidyr::complete(gc.score = seq(from = 0, to = 100, by = 1), fill = list(count = 0))
pcCounts <- dat %>% filter(group == "Positive Control") %>% group_by(gc.score) %>% summarise(count = n()) %>% arrange(gc.score) %>% ungroup() %>% tidyr::complete(gc.score = seq(from = 0, to = 100, by = 1), fill = list(count = 0))
ncCounts <- dat %>% filter(group == "Negative Control") %>% group_by(gc.score) %>% summarise(count = n()) %>% arrange(gc.score) %>% ungroup() %>% tidyr::complete(gc.score = seq(from = 0, to = 100, by = 1), fill = list(count = 0))
pcTotal <- dat %>% filter(group == "Positive Control") %>% nrow()
ncTotal <- dat %>% filter(group == "Negative Control") %>% nrow()
predTotal <- dat %>% filter(group == "Predicted") %>% nrow()
pcGC <- zoo::zoo(pcCounts$count)
ncGC <- zoo::zoo(ncCounts$count)
predGC <- zoo::zoo(predCounts$count)
smoothPC <- zoo::rollapply(pcGC, width = 10, by = 1, FUN = mean, align = "center", partial = T)
smoothNC <- zoo::rollapply(ncGC, width = 10, by = 1, FUN = mean, align = "center", partial = T)
smoothPred <- zoo::rollapply(predGC, width = 10, by = 1, FUN = mean, align = "center", partial = T)
smoothPC <- as.data.frame(smoothPC) %>% mutate(x = row_number() -1) %>% mutate(group = "Positive Control") %>% dplyr::rename(y = smoothPC) %>% mutate(y = y/pcTotal)
smoothNC <- as.data.frame(smoothNC) %>% mutate(x = row_number() -1) %>% mutate(group = "Negative Control") %>% dplyr::rename(y = smoothNC) %>% mutate(y = y/ncTotal)
smoothPred <- as.data.frame(smoothPred) %>% mutate(x = row_number() -1) %>% mutate(group = "Predicted") %>% dplyr::rename(y = smoothPred) %>% mutate(y = y/predTotal)
smoothGC <- smoothPC %>%  bind_rows(smoothNC, smoothPred)
gc.p <- ggplot() +
geom_path(data = smoothGC, aes(x = x, y = y, group = group, color = group), size = 1, show.legend = FALSE)  + labs(y = "Proportion", x = "GC percentage")  + theme_classic()
pos <- dat %>% filter(group == "Positive Control")
neg <- dat %>% filter(group == "Negative Control")
pred <- dat %>% filter(group == "Predicted")
res <- ks.test(x = pred$gc.score, y = neg$gc.score, alternative = 'less')
print(res)
res <- ks.test(x = pos$gc.score, y = neg$gc.score, alternative = 'two.sided')
print(res)
all.p <- ggarrange(distance.p, reads.p, mfe.p, z.p, rscape.p, alifold.cov.p,  motif.p, gc.p + rremove("x.text"),
labels = LETTERS[1:9],
ncol = 3, nrow = 3)
all.p
run_all <- T
if(run_all){
ggsave(filename = "~/bin/PhD_Chapters_Code/Chapter 3/chapter_3_svgs/all_distributions.svg", plot = all.p, width = 450, height = 307, units = "mm")
}
load("~/bin/PhD_Chapters_Code/Chapter 3/chapter_3_files/ncRDepth.Rda")
load("~/bin/PhD_Chapters_Code/Chapter 3/chapter_3_files/pcRDepth.Rda")
pcRDepth <- pcRDepth %>% mutate(response = 1)
ncRDepth <- ncRDepth %>% mutate(response = 0)
rocData <- pcRDepth %>% bind_rows(ncRDepth)
roc.curve(response = rocData$response, predicted = rocData$read.max.score,
main="ROC curve for Read Depths")
load(file = "chapter_3_files/max_dists_pc.Rda")
load(file = "chapter_3_files//max_dists_nc.Rda")
max_dists_pc <- max_dists_pc  %>% mutate(response = 1)
max_dists_nc <- max_dists_nc  %>% mutate(response = 0)
rocData <- max_dists_pc%>% bind_rows(max_dists_nc)
roc.curve(response = rocData$response, predicted = rocData$distance,
main="ROC curve for Maximum Phylogenetic Distance")
load("chapter_3_files/pcCovariation.Rda")
load("chapter_3_files/ncCovariation.Rda")
pcCov <- pcCov %>% mutate(response = 1)
ncCov <- ncCovRNA%>% mutate(response = 0)
rocData <- pcCov %>% bind_rows(ncCov) %>% filter(!is.na(cov.min.eval))
roc.curve(response = rocData$response, predicted = rocData$cov.min.eval,
main="ROC curve for Covariation Scores")
load("chapter_3_files/pcGC.Rda")
load("chapter_3_files/ncGC.Rda")
pcGC <- pcGC %>% mutate(response = 1)
ncGC <- ncGC %>% mutate(response = 0)
rocData <- pcGC %>% bind_rows(ncGC)
roc.curve(response = rocData$response, predicted = rocData$gc.score,
main="ROC curve for GC%")
load("chapter_3_files/pcMFE.Rda")
load("chapter_3_files/ncMFE.Rda")
roc.curve(response = rocData$response, predicted = rocData$gc.score,
main="ROC curve for MFE")
pcMFE <- pcMFE %>% mutate(response = 1)
ncMFE <- ncMFE %>% mutate(response = 0)
rocData <- pcMFE %>% bind_rows(ncMFE)
roc.curve(response = rocData$response, predicted = rocData$gc.score,
main="ROC curve for MFE")
View(rocData)
roc.curve(response = rocData$response, predicted = rocData$mfe.score,
main="ROC curve for MFE")
load("chapter_3_files/pcCovAli.Rda")
load("chapter_3_files/ncCovAli.Rda")
load("chapter_3_files/pcMFE.Rda")
load("chapter_3_files/ncMFE.Rda")
pcMFE <- pcMFE %>% mutate(response = 1)
ncMFE <- ncMFE %>% mutate(response = 0)
rocData <- pcMFE %>% bind_rows(ncMFE)
roc.curve(response = rocData$response, predicted = rocData$mfe.score,
main="ROC curve for MFE")
load("chapter_3_files/pcCovAli.Rda")
load("chapter_3_files/ncCovAli.Rda")
load("chapter_3_files/pcCovAli.Rda")
load("chapter_3_files/ncCovAli.Rda")
pcAliCov <- pcAliCov %>% mutate(response = 1)
ncAliCov <- ncAliCov %>% mutate(response = 0)
rocData <- pcAliCov %>% bind_rows(ncAliCov)
roc.curve(response = rocData$response, predicted = rocData$alifold_cov_score,
main="ROC curve for GC%")
pcMotif <- pcMotif %>% mutate(response = 1)
ncMotif <- ncMotif %>% mutate(response = 0)
rocData <- pcMotif %>% bind_rows(ncMotif)
load("chapter_3_files/pcMotif.Rda")
load("chapter_3_files/ncMotif.Rda")
pcMotif <- pcMotif %>% mutate(response = 1)
ncMotif <- ncMotif %>% mutate(response = 0)
rocData <- pcMotif %>% bind_rows(ncMotif)
rocData <- pcMotif %>% bind_rows(ncMotif) %>% mutate(sum.score = motif.mean.score*motif_count)
roc.curve(response = rocData$response, predicted = rocData$sum.score,
main="ROC curve for GC%")
load("chapter_3_files/pcAlifold.Rda")
load("chapter_3_files/ncAlifold.Rda")
pcAlifold <- pcAlifold %>% mutate(response = 1)
ncAlifold <- ncAlifold %>% mutate(response = 0)
rocData <- pcAlifold %>% bind_rows(ncAlifold)
roc.curve(response = rocData$response, predicted = rocData$z_max,
main="ROC curve for GC%")
roc.curve(response = rocData$response, predicted = rocData$z_mean,
main="ROC curve for GC%")
roc.curve(response = rocData$response, predicted = rocData$z_mean,
main="ROC curve for GC%")
knitr::opts_chunk$set(echo = TRUE)
options(warn = -1)
library(tidyverse)
library(devtools)
library(kableExtra)
library(randomForest)
library(ggpubr)
library(gplots)
library(ROSE)
setwd("~/bin/PhD_Chapters_Code/Chapter 3/")
